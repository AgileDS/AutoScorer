{"version":3,"sources":["login/Login.jsx","register/Register.jsx","components/TimeSeriesPlot.jsx","dashboard/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","props","handleChange","event","target","name","setState","update_string","value","state","username","handleSubmit","preventDefault","history","push","password","align","onSubmit","this","type","onChange","to","React","Component","withRouter","Register","confirm_password","placeholder","upDownStyle","styler","key","color","TimeSeriesPlot","max","Math","abs","data","collection","min","formatter","tracker","format","className","style","position","left","trackerX","backgroundColor","marginLeft","trackerEventIn","get","timeRange","timerange","trackerPosition","onTrackerChanged","handleTrackerChanged","enablePanZoom","maxTime","range","end","minTime","begin","minDuration","onBackgroundClick","onTimeRangeChanged","handleTimeRangeChange","height","debug","axis","series","columns","timeRanges","selections","i","selected","fill","allowSelectionClear","handleSelectionChange","onTimeRangeClicked","id","label","labelOffset","absolute","width","sample","require","beginTime","endTime","timeDelta","Object","keys","length","initialPeriod","EEG","TimeSeries","points","values","map","p","parseInt","EMG","mod","a","n","breakTimeSeries","t0","t1","period","numCuts","floor","Array","apply","initTime","finalTime","TimeRange","Dashboard","t","scale","trackerEventIn_EEG","at","bisect","trackerEventIn_EMG","trackerEventOut_EEG","trackerEventOut_EMG","selection","_handleKeyDown","initialSelections","document","addEventListener","removeEventListener","trackerEventOut","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f05ff0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {username: '', password: '', update_string: 'just to annoy you'};\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"username\":\r\n                this.setState({update_string: \"Welcome back \" + event.target.value});\r\n                break;\r\n            case \"password\":\r\n                this.setState({update_string:   \"HAHA I know your password \" + this.state.username\r\n                                                + \"!! its \" + event.target.value})\r\n        }\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        // alert('A name was submitted: ' + this.state.username);\r\n        event.preventDefault();\r\n        this.props.history.push('/dashboard');\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div align=\"center\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h1>Hello to your favourite AutoScorer!</h1>\r\n                    <b> Demo Login </b>\r\n                    <p>Enter your username</p>\r\n                    <input name='username' type=\"text\" value={this.state.username}  onChange={this.handleChange}/>\r\n                    <p>Password</p>\r\n                    <input name='password' type=\"password\" value={this.state.password}  onChange={this.handleChange}/>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"Log in\" />\r\n                    <br/>\r\n                    <Link to='/register'>Don't have an account? Sign Up</Link>\r\n                </form>\r\n                <p>AutoScorer feedback: {this.state.update_string}</p>\r\n                <br/>\r\n                {/*<Link to=\"/dashboard\">Dashboard</Link>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Login);\r\n  ","import {Link, withRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confirm_password: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        // alert('A name was submitted: ' + this.state.username);\r\n        event.preventDefault();\r\n        this.props.history.push('/');\r\n    };\r\n\r\n    render(){\r\n        return (\r\n            <div align=\"center\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h1>Hello to your favourite AutoScorer!</h1>\r\n                    <b> Demo Register </b>\r\n                    <br/>\r\n                    <input placeholder='Your name' name='username' type=\"text\"\r\n                                value={this.state.username}  onChange={this.handleChange}/>\r\n                    <br/>\r\n                    <input placeholder='Your password' name='password' type=\"password\"\r\n                                value={this.state.password}  onChange={this.handleChange}/>\r\n                    <br/>\r\n                    <input placeholder='Confirm your password' name='confirm_password' type=\"password\"\r\n                                value={this.state.confirm_password}  onChange={this.handleChange}/>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"Register\" />\r\n                    <br/>\r\n                </form>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Register);","import React from 'react';\r\nimport { format } from \"d3-format\";\r\n// Imports from the charts library\r\n\r\nimport {ChartContainer, ChartRow, Charts, YAxis, LineChart, Legend, MultiBrush, Resizable, styler} from \"react-timeseries-charts\";\r\nconst upDownStyle = styler([\r\n    { key: \"in\", color: \"#C8D5B8\" }, \r\n    { key: \"out\", color: \"#9BB8D7\" }\r\n]);\r\nclass TimeSeriesPlot extends React.Component {\r\n\r\n    render(){\r\n        const dateStyle = {\r\n            fontSize: 12,\r\n            color: \"#AAA\",\r\n            borderWidth: 1,\r\n            borderColor: \"#F4F4F4\"\r\n        };\r\n  \r\n        const markerStyle = {\r\n          backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n          color: \"#AAA\",\r\n          marginLeft: \"5px\"\r\n        }\r\n  \r\n        const max = Math.max(Math.abs(this.props.data.collection().max('in')), Math.abs(this.props.data.collection().min('in')))\r\n        const axistype = \"linear\";\r\n        const tracker = this.props.tracker ? `${this.props.tracker}` : \"\";\r\n        const formatter = format(\".4s\");\r\n  \r\n        return (\r\n            <div>\r\n                {/*\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Legend\r\n                            type=\"swatch\"\r\n                            style={upDownStyle}\r\n                            categories={[\r\n                                { key: \"in\", label: \"Into Site\" },\r\n                                { key: \"out\", label: \"Out of site\" }\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <span style={dateStyle}>{tracker}</span>\r\n                        </div>\r\n                </div>\r\n                */}\r\n                <hr />\r\n  \r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        { this.props.tracker ?\r\n                            <div style={{position: 'relative'}}>\r\n                                <div style={{position: 'absolute', left: this.props.trackerX}}>\r\n                                    <div style={markerStyle}>Data In: {formatter(this.props.trackerEventIn.get('in'))}</div>\r\n                                </div>\r\n                            </div>\r\n                        : null }\r\n                        <Resizable>\r\n                            <ChartContainer\r\n                                timeRange={this.props.timerange}\r\n                                trackerPosition={this.props.tracker}\r\n                                onTrackerChanged={this.props.handleTrackerChanged}\r\n                                enablePanZoom={false}\r\n                                maxTime={this.props.data.range().end()}\r\n                                minTime={this.props.data.range().begin()}\r\n                                minDuration={1000 * 60 * 60}\r\n                                onBackgroundClick={this.props.onBackgroundClick}\r\n                                onTimeRangeChanged={this.props.handleTimeRangeChange}\r\n                            >\r\n                                <ChartRow height=\"250\" debug={false}>\r\n                                    <Charts>\r\n                                        <LineChart\r\n                                            axis=\"traffic\"\r\n                                            series={this.props.data}\r\n                                            columns={[\"in\"]}\r\n                                            style={upDownStyle}\r\n                                        />\r\n                                        <MultiBrush\r\n                                            timeRanges={this.props.selections}\r\n                                            style={i => {\r\n                                                if (i === this.props.selected) {\r\n                                                    return { fill: \"#46abff\" };\r\n                                                } else {\r\n                                                    return { fill: \"#cccccc\" };\r\n                                                }\r\n                                            }}\r\n                                            allowSelectionClear\r\n                                            onTimeRangeChanged={this.props.handleSelectionChange}\r\n                                            onTimeRangeClicked={this.props.onTimeRangeClicked}\r\n                                        />\r\n                                    </Charts>\r\n                                    <YAxis\r\n                                        id=\"traffic\"\r\n                                        label=\"Traffic (bps)\"\r\n                                        labelOffset={0}\r\n                                        min={-max}\r\n                                        max={max}\r\n                                        absolute={true}\r\n                                        width=\"60\"\r\n                                        type={axistype}\r\n                                    />\r\n                                </ChartRow>\r\n                            </ChartContainer>\r\n                        </Resizable>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TimeSeriesPlot;","import React from 'react';\r\nimport TimeSeriesPlot from '../components/TimeSeriesPlot'\r\n\r\n// Pond\r\nimport { TimeSeries, TimeRange } from \"pondjs\";\r\n/**\r\n * DATA\r\n */\r\nconst sample = require(\"../data/sample.json\");\r\nconst beginTime = sample['begin_time']\r\nconst endTime = sample['end_time']\r\nconst timeDelta = (endTime-beginTime)/Object.keys(sample['EEG']).length\r\nconst initialPeriod = 20000  \r\nconst EEG = new TimeSeries({\r\n    name: `EEG`,\r\n    columns: [\"time\", \"in\"],\r\n    points: Object.values(sample[\"EEG\"]).map( (p,i) => [parseInt((beginTime+i*timeDelta) * 1000), p])\r\n});\r\n\r\nconst EMG = new TimeSeries({\r\n    name: `EMG`,\r\n    columns: [\"time\", \"in\"],\r\n    points: Object.values(sample[\"EMG\"]).map( (p,i) => [parseInt((beginTime+i*timeDelta) * 1000), p])\r\n});\r\n/**\r\n * UTILS\r\n */\r\nconst mod = (a,n)=>((a%n)+n)%n\r\nconst breakTimeSeries = (t0, t1, period)=>{\r\n    let numCuts = Math.floor((t1-t0)/period)\r\n    return Array.apply(null,Array(numCuts+1)).map((n,i)=>{            \r\n        let initTime = parseInt((t0+i*period) * 1000)\r\n        let finalTime = parseInt((t0+(i+1)*period) * 1000)\r\n        if (i === numCuts){\r\n            return new TimeRange(initTime,t1*1000)\r\n        }\r\n        return new TimeRange(initTime,finalTime)\r\n    })\r\n}\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n              \r\n        let initialSelections = breakTimeSeries(beginTime, endTime, initialPeriod)\r\n        this.state = {\r\n            period: initialPeriod,\r\n            tracker: null,\r\n            timerange: EEG.range(),\r\n            selected: 0,\r\n            selections:initialSelections,\r\n            trackerEventIn_EEG: null,\r\n            trackerEventIn_EMG: null,\r\n            trackerEventOut_EEG: null,\r\n            trackerEventOut_EMG: null,\r\n            trackerX: null\r\n        };\r\n    }\r\n\r\n    handleTrackerChanged = (t, scale) => {\r\n        this.setState({\r\n            tracker: t,\r\n            trackerEventIn_EEG: t && EEG.at(EEG.bisect(t)),\r\n            trackerEventIn_EMG: t && EMG.at(EMG.bisect(t)),\r\n            trackerEventOut_EEG: t && EEG.at(EEG.bisect(t)),\r\n            trackerEventOut_EMG: t && EMG.at(EMG.bisect(t)),\r\n            trackerX: t && scale(t)\r\n        });\r\n    }\r\n    handleTimeRangeChange = timerange => {\r\n        this.setState({ timerange });\r\n    }\r\n    handleSelectionChange = (timerange, i) => {\r\n        //Blocked\r\n        //const selections = this.state.selections;\r\n        //selections[i] = timerange;\r\n        //this.setState({ selections });\r\n    }\r\n    onBackgroundClick = ()=>{\r\n        this.setState({ selection: null })\r\n    }\r\n    onTimeRangeClicked = (i)=>{\r\n        this.setState({ selected: i })\r\n    }\r\n    _handleKeyDown = (event) => {\r\n        \r\n        //https://keycode.info/\r\n        switch(event.key){\r\n            case 'Enter':\r\n                this.setState((state)=>({selected:mod((state.selected+1),state.selections.length)}))\r\n                break;\r\n            case 'Backspace':\r\n                this.setState((state)=>{\r\n                    return {selected:mod(state.selected-1,state.selections.length)}\r\n                })\r\n                break;\r\n            default:\r\n                break\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", this._handleKeyDown);\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <TimeSeriesPlot \r\n                    data={EEG}\r\n                    tracker={this.state.tracker} \r\n                    timerange={this.state.timerange} \r\n                    selected={this.state.selected} \r\n                    selections={this.state.selections}\r\n                    trackerEventIn={this.state.trackerEventIn_EEG}\r\n                    trackerEventOut={this.state.trackerEventIn_EEG}\r\n                    trackerX={this.state.trackerX}\r\n                    handleTrackerChanged={this.handleTrackerChanged}\r\n                    handleTimeRangeChange={this.handleTimeRangeChange}\r\n                    handleSelectionChange={this.handleSelectionChange}\r\n                    onBackgroundClick={this.onBackgroundClick}\r\n                    onTimeRangeClicked={this.onTimeRangeClicked}\r\n                />\r\n                <TimeSeriesPlot \r\n                    data={EMG}\r\n                    tracker={this.state.tracker} \r\n                    timerange={this.state.timerange} \r\n                    selected={this.state.selected} \r\n                    selections={this.state.selections}\r\n                    trackerEventIn={this.state.trackerEventIn_EMG}\r\n                    trackerEventOut={this.state.trackerEventOut_EMG}\r\n                    trackerX={this.state.trackerX}\r\n                    handleTrackerChanged={this.handleTrackerChanged}\r\n                    handleTimeRangeChange={this.handleTimeRangeChange}\r\n                    handleSelectionChange={this.handleSelectionChange}\r\n                    onBackgroundClick={this.onBackgroundClick}\r\n                    onTimeRangeClicked={this.onTimeRangeClicked}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Dashboard;\r\n  ","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Login from './login/Login'\r\nimport Register from './register/Register'\r\nimport Dashboard from './dashboard/Dashboard'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        \r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <Login />\r\n          </Route>\r\n          <Route path=\"/dashboard\">\r\n            <Dashboard />\r\n          </Route>\r\n          <Route path=\"/register\">\r\n              <Register />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}