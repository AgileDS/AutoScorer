{"version":3,"sources":["api.js","login/Login.jsx","register/Register.jsx","components/MultiBrush.jsx","components/TimeSeriesPlot.jsx","dashboard/Dashboard.jsx","dashboard/UploadForm.jsx","App.js","serviceWorker.js","index.js"],"names":["storage","TOKEN","server","console","log","process","MY_API_URL","headers","loginForm","a","axios","post","response","status","data","token","localStorage","setItem","registerForm","Error","defaults","xsrfHeaderName","xsrfCookieName","Login","props","handleChange","event","target","name","setState","update_string","value","handleSubmit","preventDefault","state","username","loginReq","password","then","server_error","history","push","err_element","this","Alert","variant","align","Jumbotron","Form","onSubmit","className","style","Group","controlId","Label","Control","md","type","onChange","Button","to","React","Component","withRouter","validateForm","errors","valid","Object","values","forEach","val","length","Register","start","confirm_password","registerReq","MultiBrush","hasNullBrush","timeRanges","handleMouseClick","e","brushIndex","onTimeRangeClicked","isBrushing","handleBrushMouseDown","bind","handleOverlayMouseDown","handleHandleMouseDown","handleMouseUp","handleMouseMove","width","timeScale","viewBeginTime","invert","viewEndTime","TimeRange","brush_idx","x","pageX","y","pageY","xy0","Math","round","begin","end","document","addEventListener","brushingInitializationSite","initialBrushBeginTime","initialBrushEndTime","initialBrushXYPosition","allowFreeDrawing","offset","getElementOffset","overlay","left","t","getTime","drawingPosition","handle","removeEventListener","brushing_is","onUserMouseUp","xy","viewport","newBegin","newEnd","tb","te","xx","timeOffset","startOffsetConstraint","endOffsetConstrain","parseInt","onTimeRangeChanged","cursor","height","overlayStyle","fill","opacity","ref","c","onClick","onMouseDown","onMouseUp","timeRange","idx","brushDefaultStyle","fillOpacity","stroke","shapeRendering","userStyle","brushStyle","merge","userText","text","userTextStyle","textStyle","disjoint","range","intersection","bounds","key","pointerEvents","handleStyle","toJSON","handleSize","leftHandleBounds","rightHandleBounds","onMouseMove","renderOverlay","map","renderBrush","renderHandles","defaultProps","upDownStyle","styler","color","TimeSeriesPlot","formatter","tracker","format","position","trackerX","backgroundColor","marginLeft","trackerEventIn","get","timerange","trackerPosition","onTrackerChanged","handleTrackerChanged","enablePanZoom","maxTime","minTime","minDuration","onBackgroundClick","handleTimeRangeChange","debug","axis","series","columns","selections","i","selected","getText","getTextStyle","allowSelectionClear","handleSelectionChange","id","label","labelOffset","min","minSignal","max","maxSignal","absolute","visibleNumPeriods","selectedAt","secondsInPeriod","labels_dict","0","1","2","labelsInput","predict","model","array","tensor","tf","array_to_tensor","prediction","dataSync","prediction_arr","Array","from","score","indexOf","_","breakTimeRange","t0","t1","numCuts","period","floor","apply","n","initTime","finalTime","Dashboard","qualifications","offsetData","scale","trackerEventIn_EEG","EEG","at","bisect","trackerEventIn_EMG","EMG","trackerEventOut_EEG","trackerEventOut_EMG","selection","newSelected","getPrediction","pred","valEEG","edf","getPhysicalSignalConcatRecords","valEMG","concat","Float32Array","edfParser","totalRecords","getNumberOfRecords","secondsInRecord","getRawSignal","getRecordDuration","beginTime","getRecordingStartDate","valuesEEG","multiplier","timeSeriesEEG","slice","p","TimeSeries","points","valuesEMG","timeSeriesEMG","_handleKeyDown","eventKey","keys","parsed","debounce","prevProps","prevState","trackerEventOut","UploadForm","setFile","accept","file","files","EdfDecoder","reader","FileReader","onloadend","decoder","buff","result","setInput","decode","handleData","getOutput","readAsArrayBuffer","App","basename","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ggBAEMA,EAAU,CACZC,MAAO,oBAGPC,EAAS,6CACbC,QAAQC,IAAI,cAAeF,EAAQG,aAAsBA,yDAAYC,YACrEJ,GAAkB,OAElB,IAAMK,EAAU,G,4CAUT,WAAwBC,GAAxB,eAAAC,EAAA,6DACHN,QAAQC,IAAI,OAAQI,EAAWN,GAD5B,kBAGsBQ,IAAMC,KAAKT,EAAS,mBAAoBM,EAAW,CAAED,QAASA,IAHpF,UAIyB,OADpBK,EAHL,QAIcC,SAAkBD,EAASE,KAAKC,MAJ9C,uBAKKZ,QAAQC,IAAIQ,GACZI,aAAaC,QAAQjB,EAAQC,MAAOW,EAASE,KAAKC,OANvD,mBAOY,GAPZ,cASCZ,QAAQC,IAAI,kBAAmBQ,GAThC,mBAUQ,GAVR,yCAYCT,QAAQC,IAAI,QAAZ,MAZD,mBAaQ,GAbR,2D,kEAiBA,WAA2Bc,GAA3B,eAAAT,EAAA,+EAEsBC,IAAMC,KAAKT,EAAS,gBAAiBgB,EAAc,CAAEX,QAASA,IAFpF,YAEKK,EAFL,QAGcE,KAAKC,MAHnB,wBAIKZ,QAAQC,IAAI,cAAeQ,GAC3BI,aAAaC,QAAQjB,EAAQC,MAAOW,EAASE,KAAKC,OALvD,mBAMY,GANZ,YAOYH,EAASE,KAAKK,MAP1B,0CAQYP,EAASE,KAAKK,OAR1B,eAUChB,QAAQC,IAAI,kBAAmBQ,GAVhC,mBAWQ,GAXR,yCAaCT,QAAQC,IAAI,QAAZ,MAbD,mBAcQ,GAdR,2D,sBArBPM,IAAMU,SAASC,eAAiB,cAChCX,IAAMU,SAASE,eAAiB,Y,sBCT1BC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KASVC,aAAe,SAACC,GACZ,OAAQA,EAAMC,OAAOC,MACjB,IAAK,WACD,EAAKC,SAAS,CAACC,cAAe,gBAAkBJ,EAAMC,OAAOI,QASrE,EAAKF,SAAL,eAAgBH,EAAMC,OAAOC,KAAOF,EAAMC,OAAOI,SAtBlC,EAyBnBC,aAAe,SAACN,GACZA,EAAMO,iBACN9B,QAAQC,IAAI,yBAA2B,EAAK8B,MAAMC,UDhBnD,SAAP,kCCqBQC,CAJc,CACV,SAAY,EAAKF,MAAMC,SACvB,SAAY,EAAKD,MAAMG,WAETC,MAAK,SAAA1B,GACnBT,QAAQC,IAAI,YAAaQ,IACR,IAAbA,EACA,EAAKiB,SAAS,CAACU,aAAc,sCAE7B,EAAKf,MAAMgB,QAAQC,KAAK,kBAnChC,EAAKP,MAAQ,CACTC,SAAU,GACVE,SAAU,GACVP,cAAe,oBACfS,aAAc,IANH,E,sEA2Cf,IAAIG,EAIJ,OAHIC,KAAKT,MAAMK,eACXG,EAAc,kBAACE,EAAA,EAAD,CAAOC,QAAQ,UAAf,IAA0BF,KAAKT,MAAMK,aAArC,MAGd,yBAAKO,MAAM,UACP,kBAACC,EAAA,EAAD,KACI,mEACA,oEAEJ,kBAACC,EAAA,EAAD,CAAMC,SAAUN,KAAKX,aAAcc,MAAM,OAAOI,UAAU,OAAOC,MAAO,CAAC,SAAY,SACjF,kBAACH,EAAA,EAAKI,MAAN,CAAYC,UAAU,qBAClB,kBAACL,EAAA,EAAKM,MAAN,4BACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,GAAG,OAAO5B,KAAK,WAAW6B,KAAK,OAAO1B,MAAOY,KAAKT,MAAMC,SACxDuB,SAAUf,KAAKlB,gBAEjC,kBAACuB,EAAA,EAAKI,MAAN,CAAYC,UAAU,qBAClB,kBAACL,EAAA,EAAKM,MAAN,iBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,GAAG,OAAO5B,KAAK,WAAW6B,KAAK,WAAW1B,MAAOY,KAAKT,MAAMG,SAC5DqB,SAAUf,KAAKlB,gBAEhCiB,EAED,yBAAKI,MAAM,SAASI,UAAU,aAC1B,kBAACS,EAAA,EAAD,CAAQd,QAAQ,UAAUY,KAAK,UAA/B,UAGA,6BACA,kBAAC,IAAD,CAAMG,GAAG,aAAT,oCAIR,kC,GA5EIC,IAAMC,WAmFXC,cAAWxC,GCjFpByC,EAAe,SAACC,GAClB,IAAIC,GAAQ,EAKZ,OAJAC,OAAOC,OAAOH,GAAQI,SAElB,SAACC,GAAD,OAASA,EAAIC,OAAS,IAAML,GAAQ,MAEjCA,GAGLM,E,YACF,WAAYhD,GAAQ,IAAD,8BACf,4CAAMA,KAeVC,aAAe,SAACC,GAAW,IAAD,EACtBA,EAAMO,iBADgB,MAEAP,EAAMC,OAArBC,EAFe,EAEfA,KAAMG,EAFS,EAETA,MACTkC,EAAS,EAAK/B,MAAM+B,OAExB,OAAQrC,GACJ,IAAK,WACDqC,EAAO9B,SAAWJ,EAAMwC,OAAS,EAC3B,8CAAgD,GACtDN,EAAOQ,MAAQ,GACf,MACJ,IAAK,WACDR,EAAO5B,SAAWN,EAAMwC,OAAS,EAC3B,8CACA,GACN,MACJ,IAAK,mBACDN,EAAOS,iBAAoB3C,IAAU,EAAKG,MAAMG,SAC1C,6BACA,GAKd,EAAKR,UAAL,mBAAgBH,EAAMC,OAAOC,KAAOF,EAAMC,OAAOI,OAAjD,uBAAwDkC,GAAxD,KAxCe,EA4CnBjC,aAAe,SAACN,GAEZ,GADAA,EAAMO,kBACD+B,EAAa,EAAK9B,MAAM+B,QAGzB,OAFA9D,QAAQC,IAAI,0BACZ,EAAKyB,SAAS,CAACU,aAAc,mCAGjCpC,QAAQC,IAAI,yBAA2B,EAAK8B,MAAMC,UFlCnD,SAAP,kCEwCQwC,CALc,CACV,SAAY,EAAKzC,MAAMC,SACvB,SAAY,EAAKD,MAAMG,SACvB,iBAAoB,EAAKH,MAAMwC,mBAEdpC,MAAK,SAAA1B,GACtBT,QAAQC,IAAI,eAAgBQ,IACX,IAAbA,EACA,EAAKiB,SAAS,CAACC,cAAe,2CACF,kBAAblB,EACf,EAAKiB,SAAS,CAACU,aAAc3B,IAE7B,EAAKY,MAAMgB,QAAQC,KAAK,kBA9DhC,EAAKP,MAAQ,CACTC,SAAU,GACVE,SAAU,GACVqC,iBAAkB,GAClBT,OAAQ,CACJQ,MAAO,QACPtC,SAAU,GACVE,SAAU,GACVqC,iBAAkB,IAEtBnC,aAAc,IAZH,E,sEAsEf,IAAIG,EAIJ,OAHIC,KAAKT,MAAMK,eACXG,EAAc,kBAACE,EAAA,EAAD,CAAOC,QAAQ,UAAf,IAA0BF,KAAKT,MAAMK,aAArC,MAGd,yBAAKO,MAAM,UACP,kBAACC,EAAA,EAAD,KACI,mEACA,qEAEJ,kBAACC,EAAA,EAAD,CAAMC,SAAUN,KAAKX,aAAckB,UAAU,OAAOJ,MAAM,OAAOK,MAAO,CAAC,SAAY,SACjF,6BACA,kBAACH,EAAA,EAAKI,MAAN,CAAYC,UAAU,wBAClB,kBAACL,EAAA,EAAKM,MAAN,4BACA,kBAACN,EAAA,EAAKO,QAAN,CAAc3B,KAAK,WAAW6B,KAAK,OACrB1B,MAAOY,KAAKT,MAAMC,SAAUuB,SAAUf,KAAKlB,eACzD,uBAAGyB,UAAU,qBAAb,IAAmCP,KAAKT,MAAM+B,OAAO9B,SAArD,MAEJ,kBAACa,EAAA,EAAKI,MAAN,CAAYC,UAAU,wBAClB,kBAACL,EAAA,EAAKM,MAAN,sBACA,kBAACN,EAAA,EAAKO,QAAN,CAAc3B,KAAK,WAAW6B,KAAK,WACrB1B,MAAOY,KAAKT,MAAMG,SAAUqB,SAAUf,KAAKlB,eACzD,uBAAGyB,UAAU,qBAAb,IAAmCP,KAAKT,MAAM+B,OAAO5B,SAArD,KAEA,kBAACW,EAAA,EAAKM,MAAN,8BACA,kBAACN,EAAA,EAAKO,QAAN,CAAc3B,KAAK,mBAAmB6B,KAAK,WAC7B1B,MAAOY,KAAKT,MAAMwC,iBAAkBhB,SAAUf,KAAKlB,eACjE,uBAAGyB,UAAU,qBAAb,IAAmCP,KAAKT,MAAM+B,OAAOS,iBAArD,MAGHhC,EAED,yBAAKI,MAAM,SAASI,UAAU,uBAE1B,kBAACS,EAAA,EAAD,CAAQT,UAAU,WAAWL,QAAQ,UAAUY,KAAK,UAApD,YAGA,kBAAC,IAAD,CAAMG,GAAG,UAAS,kBAACD,EAAA,EAAD,CAAQT,UAAU,sBAAsBJ,MAAM,QAAQD,QAAQ,QAA9D,YAItB,8BAEJ,kC,GAlHOgB,IAAMC,WAwHdC,cAAWS,G,kECvHLI,E,YACjB,WAAYpD,GAAQ,IAAD,8BACf,4CAAMA,KAqEVqD,aAAe,WACX,OACK,EAAKrD,MAAMsD,YAAc,IAAIP,OAAS,GACoB,MAA3D,EAAK/C,MAAMsD,WAAW,EAAKtD,MAAMsD,WAAWP,OAAS,IAzE1C,EA6EnBQ,iBAAmB,SAACC,EAAGC,GACf,EAAKzD,MAAM0D,oBACX,EAAK1D,MAAM0D,mBAAmBD,IA5ElC,EAAK/C,MAAQ,CACTiD,YAAY,GAGhB,EAAKC,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBAC5B,EAAKC,uBAAyB,EAAKA,uBAAuBD,KAA5B,gBAC9B,EAAKE,sBAAwB,EAAKA,sBAAsBF,KAA3B,gBAC7B,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,gBACrB,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBAXR,E,wEAcP,IAAD,EACsB1C,KAAKnB,MAA1BkE,EADD,EACCA,MAAOC,EADR,EACQA,UACTC,EAAgBD,EAAUE,OAAO,GACjCC,EAAcH,EAAUE,OAAOH,GACrC,OAAO,IAAIK,YAAUH,EAAeE,K,2CAOnBd,EAAGgB,GACpBhB,EAAE/C,iBAD6B,IAGhBgE,EAAgBjB,EAAvBkB,MAAiBC,EAAMnB,EAAboB,MACZC,EAAM,CAACC,KAAKC,MAAMN,GAAIK,KAAKC,MAAMJ,IACjCK,GAAS7D,KAAKnB,MAAMsD,WAAWkB,GAAWQ,QAC1CC,GAAO9D,KAAKnB,MAAMsD,WAAWkB,GAAWS,MAE9CC,SAASC,iBAAiB,UAAWhE,KAAK6C,eAE1C7C,KAAKd,SAAS,CACVsD,YAAY,EACZyB,2BAA4B,QAC5BC,sBAAuBL,EACvBM,oBAAqBL,EACrBM,uBAAwBV,EACxBpB,WAAYe,M,6CAIGhB,GACnB,GAAIrC,KAAKnB,MAAMwF,kBAAoBrE,KAAKkC,eAAgB,CACpDG,EAAE/C,iBAEF,IAAMgF,EAASC,2BAAiBvE,KAAKwE,SAC/BlB,EAAIjB,EAAEkB,MAAQe,EAAOG,KACrBC,EAAI1E,KAAKnB,MAAMmE,UAAUE,OAAOI,GAAGqB,UAEzCZ,SAASC,iBAAiB,UAAWhE,KAAK6C,eAE1C,IAAM+B,EAAkB5E,KAAKnB,MAAMwF,iBAC7BrE,KAAKnB,MAAMsD,WAAWP,OACtB5B,KAAKnB,MAAMsD,WAAWP,OAAS,EAErC5B,KAAKd,SAAS,CACVsD,YAAY,EACZyB,2BAA4B,UAC5BC,sBAAuBQ,EACvBP,oBAAqBO,EACrBN,uBAAwB,KACxB9B,WAAYsC,O,4CAkBFvC,EAAGwC,EAAQvC,GAC7BD,EAAE/C,iBADuC,IAG1BgE,EAAgBjB,EAAvBkB,MAAiBC,EAAMnB,EAAboB,MACZC,EAAM,CAACC,KAAKC,MAAMN,GAAIK,KAAKC,MAAMJ,IACjCK,EAAQ7D,KAAKnB,MAAMsD,WAAWG,GAAYuB,QAAQc,UAClDb,EAAM9D,KAAKnB,MAAMsD,WAAWG,GAAYwB,MAAMa,UAEpDZ,SAASC,iBAAiB,YAAahE,KAAK8C,iBAC5CiB,SAASC,iBAAiB,UAAWhE,KAAK6C,eAE1C7C,KAAKd,SAAS,CACVsD,YAAY,EACZyB,2BAA2B,UAAD,OAAYY,GACtCX,sBAAuBL,EACvBM,oBAAqBL,EACrBM,uBAAwBV,EACxBpB,WAAYA,M,oCAIND,GAAI,IAAD,OACbA,EAAE/C,iBAEFyE,SAASe,oBAAoB,YAAa9E,KAAK8C,iBAC/CiB,SAASe,oBAAoB,UAAW9E,KAAK6C,eAE7C,IAAMkC,EAAc/E,KAAKT,MAAM+C,WAC/BtC,KAAKd,SACD,CACIsD,YAAY,EACZyB,2BAA4B,KAC5BC,sBAAuB,KACvBC,oBAAqB,KACrBC,uBAAwB,KACxB9B,WAAY,OAEhB,WACQ,EAAKzD,MAAMmG,eACX,EAAKnG,MAAMmG,cAAcD,Q,sCAMzB1C,GACZA,EAAE/C,iBAEF,IAAMgE,EAAIjB,EAAEkB,MACNC,EAAInB,EAAEoB,MACNwB,EAAK,CAACtB,KAAKC,MAAMN,GAAIK,KAAKC,MAAMJ,IAChC0B,EAAWlF,KAAKkF,WAEtB,GAAIlF,KAAKT,MAAMiD,WAAY,CACvB,IAAI2C,EACAC,EAEEC,EAAKrF,KAAKT,MAAM2E,sBAChBoB,EAAKtF,KAAKT,MAAM4E,oBAEtB,GAA8C,YAA1CnE,KAAKT,MAAM0E,2BAA0C,CACrD,IAAMK,EAASC,2BAAiBvE,KAAKwE,SAC/Be,EAAKlD,EAAEkB,MAAQe,EAAOG,KACtBC,EAAI1E,KAAKnB,MAAMmE,UAAUE,OAAOqC,GAAIZ,UACtCD,EAAIW,GACJF,EAAWT,EAAIQ,EAASrB,QAAQc,UAAYO,EAASrB,QAAUa,EAC/DU,EAASC,EAAKH,EAASpB,MAAMa,UAAYO,EAASpB,MAAQuB,IAE1DF,EAAWE,EAAKH,EAASrB,QAAQc,UAAYO,EAASrB,QAAUwB,EAChED,EAASV,EAAIQ,EAASpB,MAAMa,UAAYO,EAASpB,MAAQY,OAE1D,CACH,IAAMhB,EAAM1D,KAAKT,MAAM6E,uBACnBoB,EACAxF,KAAKnB,MAAMmE,UAAUE,OAAOQ,EAAI,IAAIiB,UACpC3E,KAAKnB,MAAMmE,UAAUE,OAAO+B,EAAG,IAAIN,UAGnCc,EAAwBD,EACxBE,EAAqBF,EAoBzB,GAnBIH,EAAKG,EAAaN,EAASrB,UAC3B4B,EAAwBJ,EAAKH,EAASrB,QAAQc,WAE9CW,EAAKE,EAAaN,EAASpB,QAC3B4B,EAAqBJ,EAAKJ,EAASpB,MAAMa,YAG7CQ,EAC8C,UAA1CnF,KAAKT,MAAM0E,4BAC+B,gBAA1CjE,KAAKT,MAAM0E,2BACL0B,SAASN,EAAKI,EAAuB,IACrCJ,IACVD,EAC8C,UAA1CpF,KAAKT,MAAM0E,4BAC+B,iBAA1CjE,KAAKT,MAAM0E,2BACL0B,SAASL,EAAKI,EAAoB,IAClCJ,GAGV,OAA4C,CAACF,EAAQD,GAA7BA,EAAxB,KAAkCC,EAAlC,MAGApF,KAAKnB,MAAM+G,oBACX5F,KAAKnB,MAAM+G,mBACP,IAAIxC,YAAU+B,EAAUC,GACxBpF,KAAKT,MAAM+C,e,sCAUV,IAGTuD,EAHQ,SACc7F,KAAKnB,MAAvBkE,EADI,EACJA,MAAO+C,EADH,EACGA,OAGf,OAAQ9F,KAAKT,MAAM0E,4BACf,IAAK,eACL,IAAK,cACD4B,EAAS,YACT,MACJ,IAAK,QACDA,EAAS,OACT,MACJ,QACIA,EACI7F,KAAKnB,MAAMwF,kBAAoBrE,KAAKkC,eAAiB,YAAc,UAG/E,IAAM6D,EAAe,CACjBC,KAAM,QACNC,QAAS,EACTJ,UAEJ,OACI,0BACIK,IAAK,SAAAC,GACD,EAAK3B,QAAU2B,GAEnB7C,EAAG,EACHE,EAAG,EACHT,MAAOA,EACP+C,OAAQA,EACRtF,MAAOuF,EACPK,QAASpG,KAAKoC,iBACdiE,YAAarG,KAAK2C,uBAClB2D,UAAWtG,KAAK6C,kB,kCAKhB0D,EAAWC,GAAM,IAOrBX,EAPoB,SACM7F,KAAKnB,MAA3BmE,EADgB,EAChBA,UAAW8C,EADK,EACLA,OAEnB,IAAKS,EACD,OAAO,4BAIX,OAAQvG,KAAKT,MAAM0E,4BACf,IAAK,eACL,IAAK,cACD4B,EAAS,YACT,MACJ,IAAK,UACDA,EACI7F,KAAKnB,MAAMwF,kBAAoBrE,KAAKkC,eAAiB,YAAc,UACvE,MACJ,QACI2D,EAAS,OAIjB,IAAMY,EAAoB,CACtBT,KAAM,OACNU,YAAa,GACbC,OAAQ,OACRC,eAAgB,aAChBf,UAEEgB,EAAY7G,KAAKnB,MAAM2B,MAAQR,KAAKnB,MAAM2B,MAAMgG,GAAO,GACvDM,EAAaC,KAAM,EAAMN,EAAmBI,GAC5CG,EAAWhH,KAAKnB,MAAMoI,KAAOjH,KAAKnB,MAAMoI,KAAKT,GAAK,GAClDU,EAAgBlH,KAAKnB,MAAMsI,UAAYnH,KAAKnB,MAAMsI,UAAUX,GAAK,GACvE,IAAKxG,KAAKkF,WAAWkC,SAASb,GAAY,CACtC,IAAMc,EAAQd,EAAUe,aAAatH,KAAKkF,YACpCrB,EAAQwD,EAAMxD,QACdC,EAAMuD,EAAMvD,MAHoB,EAIvB,CAACd,EAAUa,GAAQ,GAA3BP,EAJ+B,KAI5BE,EAJ4B,KAMlCT,EADWC,EAAUc,GACJR,EACjBP,EAAQ,IACRA,EAAQ,GAGZ,IAAMwE,EAAS,CAAEjE,IAAGE,IAAGT,QAAO+C,UAE9B,OACI,uBACA0B,IAAG,UAAKhB,EAAL,YAAYM,EAAZ,YAA0BE,GAC7BS,cAAc,MACdrB,QAAS,SAAA/D,GAAC,OAAI,EAAKD,iBAAiBC,EAAGmE,IACvCH,YAAa,SAAAhE,GAAC,OAAI,EAAKI,qBAAqBJ,EAAGmE,IAC/CF,UAAWtG,KAAK6C,eACf,0CACO0E,EADP,CAEG/G,MAAOsG,KACb,0CAAUI,EAAV,CAAyB5D,EAAGiE,EAAOjE,EAAEiE,EAAOxE,MAAM,EAAE,GAAIS,EAAG+D,EAAO/D,EAAE+D,EAAOzB,OAAO,EAAE,KAAKkB,IAG/F,OAAO,8B,oCAGGT,EAAWC,GAAM,IAAD,SACIxG,KAAKnB,MAA3BmE,EADkB,EAClBA,UAAW8C,EADO,EACPA,OAEnB,IAAKS,EACD,OAAO,4BAIX,IAAMmB,EAAc,CAChB1B,KAAM,QACNC,QAAS,EACTJ,OAAQ,aAGZ,IAAK7F,KAAKkF,WAAWkC,SAASb,GAAY,CACtC,IADsC,EACxBA,EAAUe,aAAatH,KAAKkF,YACfyC,SAFW,mBAE/B9D,EAF+B,KAExBC,EAFwB,OAGvB,CAACd,EAAUa,GAAQ,GAA3BP,EAH+B,KAG5BE,EAH4B,KAMlCT,EAFWC,EAAUc,GAEJR,EACjBP,EAAQ,IACRA,EAAQ,GAGZ,IAAM6E,EAAa5H,KAAKnB,MAAM+I,WAExBC,EAAmB,CAAEvE,EAAGA,EAAI,EAAGE,IAAGT,MAAO6E,EAAY9B,UACrDgC,EAAoB,CACtBxE,EAAGA,GAAKP,EAAQ6E,GAChBpE,IACAT,MAAO6E,EAAa,EACpB9B,UAGJ,OACI,2BACI,0CACQ+B,EADR,CAEIrH,MAAOkH,EACPD,cAAc,MACdpB,YAAa,SAAAhE,GAAC,OAAI,EAAKO,sBAAsBP,EAAG,OAAQmE,IACxDF,UAAWtG,KAAK6C,iBAEpB,0CACQiF,EADR,CAEItH,MAAOkH,EACPD,cAAc,MACdpB,YAAa,SAAAhE,GAAC,OAAI,EAAKO,sBAAsBP,EAAG,QAASmE,IACzDF,UAAWtG,KAAK6C,kBAKhC,OAAO,8B,+BAGD,IAAD,OACL,OACI,uBAAGkF,YAAa/H,KAAK8C,iBAChB9C,KAAKgI,iBACJhI,KAAKnB,MAAMsD,YAAc,IAAI8F,KAAI,SAAC1B,EAAWC,GAC3C,OACI,uBAAGgB,IAAG,qBAAgBhB,IACjB,EAAK0B,YAAY3B,EAAWC,GAC5B,EAAK2B,cAAc5B,EAAWC,Y,GA7WnBtF,IAAMC,WAub9Cc,EAAWmG,aAAe,CACtBR,WAAY,EACZvD,kBAAkB,GCvctB,IAAMgE,EAAcC,iBAAO,CACvB,CAAEd,IAAK,KAAMe,MAAO,WACpB,CAAEf,IAAK,MAAOe,MAAO,aAiHVC,E,iLA7GF,IAAD,OAgBEC,GADUzI,KAAKnB,MAAM6J,SAAX,UAAwB1I,KAAKnB,MAAM6J,SACjCC,iBAAO,QAEzB,OACI,6BAkBI,6BAEA,yBAAKpI,UAAU,OACX,yBAAKA,UAAU,aACTP,KAAKnB,MAAM6J,QACT,yBAAKlI,MAAO,CAACoI,SAAU,aACnB,yBAAKpI,MAAO,CAACoI,SAAU,WAAYnE,KAAMzE,KAAKnB,MAAMgK,WAChD,yBAAKrI,MApCb,CAClBsI,gBAAiB,2BACjBP,MAAO,OACPQ,WAAY,QAiCc,YAAmCN,EAAUzI,KAAKnB,MAAMmK,eAAeC,IAAI,UAGrF,KACF,kBAAC,YAAD,KACI,kBAAC,iBAAD,CACI1C,UAAWvG,KAAKnB,MAAMqK,UACtBP,OAAQ,OACRQ,gBAAiBnJ,KAAKnB,MAAM6J,QAC5BU,iBAAkBpJ,KAAKnB,MAAMwK,qBAC7BC,eAAe,EACfC,QAASvJ,KAAKnB,MAAMqK,UAAUpF,MAC9B0F,QAASxJ,KAAKnB,MAAMqK,UAAUrF,QAC9B4F,YAAa,KACbC,kBAAmB1J,KAAKnB,MAAM6K,kBAC9B9D,mBAAoB5F,KAAKnB,MAAM8K,uBAE/B,kBAAC,WAAD,CAAU7D,OAAO,MAAM8D,OAAO,GAC1B,kBAAC,SAAD,KACI,kBAAC,YAAD,CACIC,KAAK,UACLC,OAAQ9J,KAAKnB,MAAMV,KACnB4L,QAAS,CAAC,MACVvJ,MAAO6H,IAEX,kBAAC,EAAD,CACIlG,WAAYnC,KAAKnB,MAAMmL,WACvBxJ,MAAO,SAAAyJ,GACH,OAAIA,IAAM,EAAKpL,MAAMqL,SACV,CAAElE,KAAM,WAER,CAAEA,KAAM,YAGvBiB,KAAM,SAAAgD,GACF,OAAO,EAAKpL,MAAMsL,QAAQ,EAAKtL,MAAMsL,QAAQF,GAAG,IAEpD9C,UAAW,SAAA8C,GACP,OAAO,EAAKpL,MAAMuL,aAAa,EAAKvL,MAAMuL,aAAaH,GAAG,IAE9DI,qBAAmB,EACnBzE,mBAAoB5F,KAAKnB,MAAMyL,sBAC/B/H,mBAAoBvC,KAAKnB,MAAM0D,sBAGvC,kBAAC,QAAD,CACIgI,GAAG,UACHC,MAAM,gBACNC,YAAa,EACbC,IAAK1K,KAAKnB,MAAM8L,UAChBC,IAAK5K,KAAKnB,MAAMgM,UAChBC,UAAU,EACV/H,MAAM,KACNjC,KAnFf,qB,GAhBII,IAAMC,W,mlBCDnC,IAAM4J,EAAoB,EACpBC,EAAa,EACbC,EAAkB,GAClBC,EAAc,CAACC,EAAI,IAAKC,EAAI,KAAMC,EAAI,KACtCC,GAAc,CAAC,EAAM,IAAK,EAAM,KAAM,EAAM,IAAI,EAAM,IAAK,EAAM,KAAM,EAAM,K,SAEpEC,G,mFAAf,WAAuBC,EAAOC,GAA9B,qBAAA3N,EAAA,6DAMU4N,EANV,SAC6BD,GAGrB,OADeE,IAAYF,EADb,CAAC,EAAG,IAAM,GACiB,WAG7BG,CAAgBH,GAC1BI,EAAaL,EAAMD,QAAQG,GAAQI,WACnCC,EAAiBC,MAAMC,KAAKJ,GAE5BK,EAAQhB,EAAYa,EAAeI,QAAQC,IAAExB,IAAImB,KAV3D,kBAWWG,GAXX,4C,sBAkBA,IAAMG,GAAiB,SAACC,EAAIC,EAAIC,GAC5B,IAAIC,EAAS9I,KAAK+I,OAAOH,EAAGD,GAAIE,GAChC,OAAOR,MAAMW,MAAM,KAAKX,MAAMQ,EAAQ,IAAIvE,KAAI,SAAC2E,EAAE3C,GAC7C,IAAI4C,EAAWlH,SAAU2G,EAAGrC,EAAEwC,GAC1BK,EAAYnH,SAAU2G,GAAIrC,EAAE,GAAGwC,GACnC,OAAIxC,IAAMuC,EACC,IAAIpJ,YAAUyJ,EAASN,GAE3B,IAAInJ,YAAUyJ,EAASC,OAwQvBC,G,YA3PX,WAAYlO,GAAQ,IAAD,8BACf,4CAAMA,KAqBVsL,QAAU,SAACF,GACP,OAAwD,MAApD,EAAK1K,MAAMyN,eAAe/C,EAAE,EAAK1K,MAAM0N,YAChC,EAAK1N,MAAMyN,eAAe/C,EAAE,EAAK1K,MAAM0N,YACxChD,IAAI,EAAK1K,MAAM2K,SACd,EAAK3K,MAAMsM,gBADf,GAzBQ,EA6BnBzB,aAAe,SAACH,GACZ,OAAwD,MAApD,EAAK1K,MAAMyN,eAAe/C,EAAE,EAAK1K,MAAM0N,YAChC,CAAC,KAAO,UAAW,SAAY,IAChChD,IAAI,EAAK1K,MAAM2K,SACd,CAAC,KAAO,UAAU,SAAY,SADlC,GAhCQ,EAoCnBb,qBAAuB,SAAC3E,EAAGwI,GACvB,EAAKhO,SAAS,CACVwJ,QAAShE,EACTyI,mBAAoBzI,GAAK,EAAKnF,MAAM6N,IAAIC,GAAG,EAAK9N,MAAM6N,IAAIE,OAAO5I,IACjE6I,mBAAoB7I,GAAK,EAAKnF,MAAMiO,IAAIH,GAAG,EAAK9N,MAAMiO,IAAIF,OAAO5I,IACjE+I,oBAAqB/I,GAAK,EAAKnF,MAAM6N,IAAIC,GAAG,EAAK9N,MAAM6N,IAAIE,OAAO5I,IAClEgJ,oBAAqBhJ,GAAK,EAAKnF,MAAMiO,IAAIH,GAAG,EAAK9N,MAAMiO,IAAIF,OAAO5I,IAClEmE,SAAUnE,GAAKwI,EAAMxI,MA3CV,EA+CnBiF,sBAAwB,SAAAT,GACpB,EAAKhK,SAAS,CAAEgK,eAhDD,EAkDnBoB,sBAAwB,SAACpB,EAAWe,KAlDjB,EAwDnBP,kBAAoB,WAChB,EAAKxK,SAAS,CAAEyO,UAAW,KAAM9B,WAAY,QAzD9B,EA2DnBtJ,mBAAqB,SAAC0H,GAClB,IAAI2D,EAAc3D,EAAEc,EACpB,EAAK8C,cAAc,EAAKtO,MAAM0N,WAAWW,GAAajO,MAAK,SAACmO,GACxD,EAAK5O,SAAS,CAAEgL,SAAU0D,EAAa/B,WAAYiC,QA9DxC,EAiEnBD,cAAgB,SAAC5D,GAAiB,IAAduB,EAAa,uDAAP,KAElBuC,EAAU,EAAKlP,MAAMmP,IAAIC,+BAA+B,EAAIhE,EAAGgB,EAAiBA,GAChFiD,EAAU,EAAKrP,MAAMmP,IAAIC,+BAA+B,EAAIhE,EAAGgB,EAAiBA,GAChFkD,EAASnC,MAAMC,KAAK8B,GAAQI,OAAOnC,MAAMC,KAAKiC,IAElD,OADK1C,IAAOA,EAAQ,EAAKjM,MAAMiM,OACxBD,GAAQC,EAAO4C,aAAanC,KAAKkC,KAvEzB,EAyEnBE,UAAY,WAAiB,IAAhBpB,EAAe,uDAAJ,EAChBe,EAAM,EAAKnP,MAAMmP,IACrB,GAAKA,EAAL,CAEA,IAAIM,EAAeN,EAAIO,qBAGnBC,GAFiBR,EAAIS,aAAa,EAAE,GAAG7M,OAC1BoM,EAAIS,aAAa,EAAEH,EAAa,GAAG1M,OAC9BoM,EAAIU,qBACtBC,EAAYX,EAAIY,wBAAwBjK,UAExCkK,EAAYb,EAAIC,+BAA+B,EAAGhB,EAAWhC,EAAiBF,EAAkBE,GAEhG6D,EAAa,EAKbC,GAJU3C,IAAEnE,IAAI4G,EAAUG,MAAM,EAAE,KAAK,SAACC,EAAEhF,GAC1C,OAAO0E,EAAUG,GAAY7E,EAAEgD,EAAWhC,GAAiBuD,EAAkB,OAG7D,IAAIU,aAAW,CAC/BjQ,KAAK,MACL8K,QAAS,CAAC,OAAQ,MAClBoF,OAAQ/C,IAAEnE,IAAI4G,GAAW,SAACI,EAAEhF,GAAH,MAAS,CAACtE,SAASgJ,EAAUG,GAAY7E,EAAEgD,EAAWhC,GAAiBuD,EAAkB,KAAMS,SAExHG,EAAYpB,EAAIC,+BAA+B,EAAGhB,EAAWhC,EAAiBF,EAAkBE,GAEhGoE,EAAgB,IAAIH,aAAW,CAC/BjQ,KAAK,MACL8K,QAAS,CAAC,OAAQ,MAClBoF,OAAQ/C,IAAEnE,IAAImH,GAAY,SAACH,EAAEhF,GAAH,MAAS,CAACtE,SAASgJ,EAAUG,GAAY7E,EAAEgD,EAAWhC,GAAiBuD,EAAkB,KAAMS,QAEzHjF,EAAaqC,GAAe0C,EAAc7F,YAAYvB,SAAS,GAAIoH,EAAc7F,YAAYvB,SAAS,GAAIoD,GAC9G,MAAO,CAACgE,EAAeM,EAAerF,KAvGvB,EAyGnBsF,eAAiB,SAACvQ,GAEd,IAAImL,EAAW,EAAK3K,MAAM2K,SACtB5F,EAAS,EAAK/E,MAAM0N,WACpBsC,EAAWxQ,EAAMyI,IACjBwF,EAAkB,EAAKzN,MAAMyN,eASjC,QARoD,IAAhDxL,OAAOgO,KAAKlE,IAAaa,QAAQoD,IACjCvC,EAAe,EAAD,GAAKA,EAAL,eAAqB1I,EAAO4F,EAAUoB,GAAYvM,EAAMyI,OACtE+H,EAAS,cACM,KAAVA,IACLvC,EAAe,EAAD,GAAKA,EAAL,eAAqB1I,EAAO4F,EAAU,EAAK3K,MAAMsM,aAC/D0D,EAAS,cAGNA,GACH,IAAK,SACDjL,GAAgByG,EAChB,MACJ,IAAK,WACDzG,EAASA,EAAOyG,EAAkB,EAAEzG,EAAOyG,EAAkB,EAC7D,MACJ,IAAK,aAEGb,EAASc,EACTd,GAAU,EAEV5F,GAAQ,EAEZ,MACJ,IAAK,YACGA,EAAO,EAAEA,GAAQ,EAEb4F,EAAS,IACTA,GAAU,GAO1B,GAAI5F,GAAQ,EAAK/E,MAAM0N,WAAY,CAC/B,IAAIwC,EAAS,EAAKpB,UAAU/J,GACxByK,EAAgBU,EAAO,GACvBJ,EAAgBI,EAAO,GACvBzF,EAAayF,EAAO,GACxB,EAAK5B,cAAcvJ,EAAO4F,GAAUvK,MAAK,SAACmO,GACtC,EAAK5O,SAAS,CACVkO,IAAK2B,EACLvB,IAAK6B,EACLpC,WAAY3I,EACZ4F,SAASA,EACThB,UAAW6F,EAAc1H,QACzB2C,WAAYA,EACZgD,eAAgBA,EAChBnB,WAAYiC,YAIpB,EAAKD,cAAcvJ,EAAO4F,GAAUvK,MAAK,SAACmO,GACtC,EAAK5O,SAAS,CAACgL,SAASA,EAAU8C,eAAgBA,EAAgBnB,WAAWiC,QA/JrF,EAAKvO,MAAQ,CACT6N,IAAK,KACLI,IAAK,KACLP,WAAY,EACZvE,QAAS,KACTQ,UAAW,KACXgB,SAAU,EACVF,WAAW,KACXgD,eAAgB,GAChBnB,WAAY,KACZsB,mBAAoB,KACpBI,mBAAoB,KACpBE,oBAAqB,KACrBC,oBAAqB,KACrB7E,SAAU,MAnBC,E,iFAoLf9E,SAASC,iBAAiB,UAAWoI,IAAEsD,SAAS1P,KAAKsP,eAAe,O,6CAGpEvL,SAASe,oBAAoB,UAAWsH,IAAEsD,SAAS1P,KAAKsP,eAAgB,O,yCAEzDK,EAAWC,GAAY,IAAD,OACrC,GAAoB,MAAhB5P,KAAKnB,MAAMmP,KAAa2B,EAAU3B,MAAMhO,KAAKnB,MAAMmP,IAAI,CACvD,IAAIyB,EAASzP,KAAKqO,UAAU,GACxBU,EAAgBU,EAAO,GACvBJ,EAAgBI,EAAO,GACvBzF,EAAayF,EAAO,GACxB9D,IAAmB,oGAAoGhM,MAAK,SAAC6L,GACzH,EAAKqC,cAAc,EAAGrC,GAAO7L,MAAK,SAACkM,GAC/B,EAAK3M,SAAS,CACVkO,IAAK2B,EACLvB,IAAK6B,EACLnG,UAAW6F,EAAc1H,QACzB2C,WAAYA,EACZwB,MAAOA,EACPK,WAAWA,a,+BAQ3B,OACI,6BACM7L,KAAKT,MAAM6N,IAAM,kBAAC,EAAD,CACfjP,KAAM6B,KAAKT,MAAM6N,IACjB1E,QAAS1I,KAAKT,MAAMmJ,QACpBQ,UAAWlJ,KAAKT,MAAM2J,UACtBgB,SAAUlK,KAAKT,MAAM2K,SACrBF,WAAYhK,KAAKT,MAAMyK,WACvBhB,eAAgBhJ,KAAKT,MAAM4N,mBAC3B0C,gBAAiB7P,KAAKT,MAAM4N,mBAC5BtE,SAAU7I,KAAKT,MAAMsJ,SACrBQ,qBAAsBrJ,KAAKqJ,qBAC3BM,sBAAuB3J,KAAK2J,sBAC5BW,sBAAuBtK,KAAKsK,sBAC5BZ,kBAAmB1J,KAAK0J,kBACxBnH,mBAAoBvC,KAAKuC,mBACzBsI,UAAW,IACXF,WAAY,IACZR,QAASnK,KAAKmK,QACdC,aAAcpK,KAAKoK,eACpB,KACFpK,KAAKT,MAAMiO,IAAK,kBAAC,EAAD,CACbrP,KAAM6B,KAAKT,MAAMiO,IACjB9E,QAAS1I,KAAKT,MAAMmJ,QACpBQ,UAAWlJ,KAAKT,MAAM2J,UACtBgB,SAAUlK,KAAKT,MAAM2K,SACrBF,WAAYhK,KAAKT,MAAMyK,WACvBhB,eAAgBhJ,KAAKT,MAAMgO,mBAC3BsC,gBAAiB7P,KAAKT,MAAMmO,oBAC5B7E,SAAU7I,KAAKT,MAAMsJ,SACrBQ,qBAAsBrJ,KAAKqJ,qBAC3BM,sBAAuB3J,KAAK2J,sBAC5BW,sBAAuBtK,KAAKsK,sBAC5BZ,kBAAmB1J,KAAK0J,kBACxBnH,mBAAoBvC,KAAKuC,mBACzBsI,UAAW,IACXF,WAAY,IACZR,QAASnK,KAAKmK,QACdC,aAAcpK,KAAKoK,eACpB,U,GAvPKlJ,IAAMC,W,mBCff2O,G,+KAnCNjR,GACL,OACA,6BACE,2BAAOiC,KAAK,OAAOC,SAAUf,KAAK+P,QAAQrN,KAAK1C,MAAOgQ,OAAO,Y,+BAIxDjR,M,8BAGDA,GAAQ,IAAD,OAETkR,EAAOlR,EAAMC,OAAOkR,MAAM,GAChB,IAAIC,cAOlB,GAAY,MAARF,EAAa,CACf,IAAIG,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,IAAIC,EAAU,IAAIJ,cACdK,EAAOJ,EAAOK,OAClBF,EAAQG,SAASF,GACjBD,EAAQI,SACR,EAAK9R,MAAM+R,WAAWL,EAAQM,cAEhCT,EAAOU,kBAAkBb,Q,GA9BN/O,IAAMC,WCwChB4P,G,2MA3BbxR,MAAM,CACJyO,IAAI,M,wEAEG,IAAD,OACN,OACE,kBAAC,IAAD,CAAQgD,SAAS,KACf,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,IAAD,CAAUjQ,GAAG,YAEf,kBAAC,IAAD,CAAOiQ,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,cACRlR,KAAKT,MAAMyO,IAAmE,KAA/D,kBAAC,GAAD,CAAY4C,WAAY,SAACzS,GAAQ,EAAKe,SAAS,CAAC8O,IAAI7P,OACrE,kBAAC,GAAD,CAAW6P,IAAKhO,KAAKT,MAAMyO,OAE7B,kBAAC,IAAD,CAAOkD,KAAK,aACR,kBAAC,EAAD,c,GApBEhQ,IAAMC,WCFJgQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAAS1N,SAAS2N,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlS,MAAK,SAAAmS,GACjCA,EAAaC,kB","file":"static/js/main.c26223a2.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst storage = {\r\n    TOKEN: 'AutoScorer-Token'\r\n};\r\n\r\nvar server = 'https://fierce-citadel-47273.herokuapp.com'|| \"http://localhost:8000\";\r\nconsole.log(\"server url:\", server, process.env.NODE_ENV, process.env.MY_API_URL);\r\nserver = server + \"/api\"\r\n\r\nconst headers = {\r\n    // 'Content-Type': 'application/json',\r\n    // \"Access-Control-Allow-Origin\": \"*\",\r\n    // 'Access-Control-Allow-Credentials': 'true'\r\n}\r\n\r\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\r\naxios.defaults.xsrfCookieName = \"csrftoken\";\r\n\r\n\r\nexport async function loginReq(loginForm) {\r\n    console.log(\"lolw\", loginForm, server)\r\n    try {\r\n        let response = await axios.post(server + \"/api-token-auth/\", loginForm, { headers: headers})\r\n        if (response.status === 200 && response.data.token) {\r\n            console.log(response);\r\n            localStorage.setItem(storage.TOKEN, response.data.token);\r\n            return true;\r\n        }\r\n        console.log(\"Response not ok\", response)\r\n        return false;\r\n    } catch (err) {\r\n        console.log(\"error\", err);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport async function registerReq(registerForm) {\r\n    try {\r\n        let response = await axios.post(server + \"/create-user/\", registerForm, { headers: headers})\r\n        if (response.data.token) {\r\n            console.log(\"registerReq\", response)\r\n            localStorage.setItem(storage.TOKEN, response.data.token);\r\n            return true;\r\n        } else if (response.data.Error) {\r\n            return response.data.Error;\r\n        }\r\n        console.log(\"Response not ok\", response)\r\n        return false;\r\n    } catch (err) {\r\n        console.log(\"error\", err);\r\n        return false;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {loginReq} from \"../api\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            update_string: 'just to annoy you',\r\n            server_error: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        switch (event.target.name) {\r\n            case \"username\":\r\n                this.setState({update_string: \"Welcome back \" + event.target.value});\r\n                break;\r\n            case \"password\":\r\n                // this.setState({update_string:   \"HAHA I know your password \" + this.state.username\r\n                //                                 + \"!! its \" + event.target.value})\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({[event.target.name]: event.target.value});\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log('A name was submitted: ' + this.state.username);\r\n        let payload = {\r\n            \"username\": this.state.username,\r\n            \"password\": this.state.password\r\n        }\r\n        loginReq(payload).then(response => {\r\n            console.log(\"LoginPage\", response)\r\n            if (response === false) {\r\n                this.setState({server_error: \"Username or password is incorrect\"});\r\n            } else {\r\n                this.props.history.push('/dashboard');\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let err_element;\r\n        if (this.state.server_error) {\r\n            err_element = <Alert variant=\"danger\"> {this.state.server_error} </Alert>;\r\n        }\r\n        return (\r\n            <div align=\"center\">\r\n                <Jumbotron>\r\n                    <h1>Hello to your favourite AutoScorer!</h1>\r\n                    <p> Sign in to get into your dashboard </p>\r\n                </Jumbotron>\r\n                <Form onSubmit={this.handleSubmit} align='left' className=\"mt-5\" style={{'maxWidth': 20 + 'em'}}>\r\n                    <Form.Group controlId=\"formBasicUsername\">\r\n                        <Form.Label>Enter your username</Form.Label>\r\n                        <Form.Control md=\"auto\" name='username' type=\"text\" value={this.state.username}\r\n                                      onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control md=\"auto\" name='password' type=\"password\" value={this.state.password}\r\n                                      onChange={this.handleChange}/>\r\n                    </Form.Group>\r\n                    {err_element}\r\n\r\n                    <div align=\"center\" className='mt-3 pt-3'>\r\n                        <Button variant=\"primary\" type=\"submit\">\r\n                            Log in\r\n                        </Button>\r\n                        <br/>\r\n                        <Link to='/register'>Don't have an account? Sign Up</Link>\r\n                    </div>\r\n                </Form>\r\n                {/*<p>AutoScorer feedback: {this.state.update_string}</p>*/}\r\n                <br/>\r\n                {/*<Link to=\"/dashboard\">Dashboard</Link>*/}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Login);\r\n  ","import {withRouter} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {registerReq} from \"../api\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\nconst validateForm = (errors) => {\r\n    let valid = true;\r\n    Object.values(errors).forEach(\r\n        // if we have an error string set valid to false\r\n        (val) => val.length > 0 && (valid = false)\r\n    );\r\n    return valid;\r\n}\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            confirm_password: '',\r\n            errors: {\r\n                start: 'error',\r\n                username: '',\r\n                password: '',\r\n                confirm_password: ''\r\n            },\r\n            server_error: ''\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        event.preventDefault();\r\n        const {name, value} = event.target;\r\n        let errors = this.state.errors;\r\n\r\n        switch (name) {\r\n            case 'username':\r\n                errors.username = value.length < 4\r\n                    ? 'Username must be at least 4 characters long' : '';\r\n                errors.start = '';\r\n                break;\r\n            case 'password':\r\n                errors.password = value.length < 4\r\n                    ? 'Password must be at least 4 characters long'\r\n                    : '';\r\n                break;\r\n            case 'confirm_password':\r\n                errors.confirm_password = (value !== this.state.password)\r\n                    ? 'Password inputs must match'\r\n                    : '';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({[event.target.name]: event.target.value, errors});\r\n    };\r\n\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!validateForm(this.state.errors)) {\r\n            console.log(\"Submit not valid!\")\r\n            this.setState({server_error: \"Please fill the form correctly\"});\r\n            return;\r\n        }\r\n        console.log('A name was submitted: ' + this.state.username);\r\n        let payload = {\r\n            \"username\": this.state.username,\r\n            \"password\": this.state.password,\r\n            \"confirm_password\": this.state.confirm_password\r\n        }\r\n        registerReq(payload).then(response => {\r\n            console.log(\"RegisterPage\", response)\r\n            if (response === false) {\r\n                this.setState({update_string: \"There was error with your registration\"});\r\n            } else if (typeof  response === \"string\") {\r\n                this.setState({server_error: response});\r\n            } else {\r\n                this.props.history.push('/dashboard');\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let err_element;\r\n        if (this.state.server_error) {\r\n            err_element = <Alert variant=\"danger\"> {this.state.server_error} </Alert>;\r\n        }\r\n        return (\r\n            <div align=\"center\">\r\n                <Jumbotron>\r\n                    <h1>Hello to your favourite AutoScorer!</h1>\r\n                    <p> Register to get into your dashboard </p>\r\n                </Jumbotron>\r\n                <Form onSubmit={this.handleSubmit} className=\"mt-3\" align='left' style={{'maxWidth': 20 + 'em'}}>\r\n                    <br/>\r\n                    <Form.Group controlId=\"formRegisterUsername\">\r\n                        <Form.Label>Enter your username</Form.Label>\r\n                        <Form.Control name='username' type=\"text\"\r\n                                      value={this.state.username} onChange={this.handleChange}/>\r\n                        <p className=\"font-weight-light\"> {this.state.errors.username} </p>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formRegisterPassword\">\r\n                        <Form.Label>Your password</Form.Label>\r\n                        <Form.Control name='password' type=\"password\"\r\n                                      value={this.state.password} onChange={this.handleChange}/>\r\n                        <p className=\"font-weight-light\"> {this.state.errors.password} </p>\r\n\r\n                        <Form.Label>Confirm your password</Form.Label>\r\n                        <Form.Control name='confirm_password' type=\"password\"\r\n                                      value={this.state.confirm_password} onChange={this.handleChange}/>\r\n                        <p className=\"font-weight-light\"> {this.state.errors.confirm_password} </p>\r\n                    </Form.Group>\r\n\r\n                    {err_element}\r\n\r\n                    <div align=\"center\" className='mt-3 pt-3 btn-block'>\r\n\r\n                        <Button className='col-md-8' variant=\"primary\" type=\"submit\">\r\n                            Register\r\n                        </Button>\r\n                        <Link to='/login'><Button className='col-md-4 text-right' align=\"right\" variant=\"link\" >\r\n                            Log in\r\n                        </Button></Link>\r\n                    </div>\r\n                    <br/>\r\n                </Form>\r\n                <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Register);","/**\r\n *  Copyright (c) 2016, The Regents of the University of California,\r\n *  through Lawrence Berkeley National Laboratory (subject to receipt\r\n *  of any required approvals from the U.S. Dept. of Energy).\r\n *  All rights reserved.\r\n *\r\n *  This source code is licensed under the BSD-style license found in the\r\n *  LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport merge from \"merge\";\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TimeRange } from \"pondjs\";\r\n\r\nimport { getElementOffset } from \"react-timeseries-charts/lib/js/util\";\r\n\r\n/**\r\n * Renders a brush with the range defined in the prop `timeRange`.\r\n */\r\nexport default class MultiBrush extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isBrushing: false\r\n        };\r\n\r\n        this.handleBrushMouseDown = this.handleBrushMouseDown.bind(this);\r\n        this.handleOverlayMouseDown = this.handleOverlayMouseDown.bind(this);\r\n        this.handleHandleMouseDown = this.handleHandleMouseDown.bind(this);\r\n        this.handleMouseUp = this.handleMouseUp.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    viewport() {\r\n        const { width, timeScale } = this.props;\r\n        const viewBeginTime = timeScale.invert(0);\r\n        const viewEndTime = timeScale.invert(width);\r\n        return new TimeRange(viewBeginTime, viewEndTime);\r\n    }\r\n\r\n    //\r\n    // Event handlers\r\n    //\r\n\r\n    handleBrushMouseDown(e, brush_idx) {\r\n        e.preventDefault();\r\n\r\n        const { pageX: x, pageY: y } = e;\r\n        const xy0 = [Math.round(x), Math.round(y)];\r\n        const begin = +this.props.timeRanges[brush_idx].begin();\r\n        const end = +this.props.timeRanges[brush_idx].end();\r\n\r\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n\r\n        this.setState({\r\n            isBrushing: true,\r\n            brushingInitializationSite: \"brush\",\r\n            initialBrushBeginTime: begin,\r\n            initialBrushEndTime: end,\r\n            initialBrushXYPosition: xy0,\r\n            brushIndex: brush_idx\r\n        });\r\n    }\r\n\r\n    handleOverlayMouseDown(e) {\r\n        if (this.props.allowFreeDrawing || this.hasNullBrush()) {\r\n            e.preventDefault();\r\n\r\n            const offset = getElementOffset(this.overlay);\r\n            const x = e.pageX - offset.left;\r\n            const t = this.props.timeScale.invert(x).getTime();\r\n\r\n            document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n\r\n            const drawingPosition = this.props.allowFreeDrawing\r\n                ? this.props.timeRanges.length\r\n                : this.props.timeRanges.length - 1;\r\n\r\n            this.setState({\r\n                isBrushing: true,\r\n                brushingInitializationSite: \"overlay\",\r\n                initialBrushBeginTime: t,\r\n                initialBrushEndTime: t,\r\n                initialBrushXYPosition: null,\r\n                brushIndex: drawingPosition\r\n            });\r\n        }\r\n    }\r\n\r\n    hasNullBrush = () => {\r\n        return (\r\n            (this.props.timeRanges || []).length > 0 &&\r\n            this.props.timeRanges[this.props.timeRanges.length - 1] == null\r\n        );\r\n    };\r\n\r\n    handleMouseClick = (e, brushIndex) => {\r\n        if (this.props.onTimeRangeClicked) {\r\n            this.props.onTimeRangeClicked(brushIndex);\r\n        }\r\n    };\r\n\r\n    handleHandleMouseDown(e, handle, brushIndex) {\r\n        e.preventDefault();\r\n\r\n        const { pageX: x, pageY: y } = e;\r\n        const xy0 = [Math.round(x), Math.round(y)];\r\n        const begin = this.props.timeRanges[brushIndex].begin().getTime();\r\n        const end = this.props.timeRanges[brushIndex].end().getTime();\r\n\r\n        document.addEventListener(\"mouseover\", this.handleMouseMove);\r\n        document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n\r\n        this.setState({\r\n            isBrushing: true,\r\n            brushingInitializationSite: `handle-${handle}`,\r\n            initialBrushBeginTime: begin,\r\n            initialBrushEndTime: end,\r\n            initialBrushXYPosition: xy0,\r\n            brushIndex: brushIndex\r\n        });\r\n    }\r\n\r\n    handleMouseUp(e) {\r\n        e.preventDefault();\r\n\r\n        document.removeEventListener(\"mouseover\", this.handleMouseMove);\r\n        document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n\r\n        const brushing_is = this.state.brushIndex;\r\n        this.setState(\r\n            {\r\n                isBrushing: false,\r\n                brushingInitializationSite: null,\r\n                initialBrushBeginTime: null,\r\n                initialBrushEndTime: null,\r\n                initialBrushXYPosition: null,\r\n                brushIndex: null\r\n            },\r\n            () => {\r\n                if (this.props.onUserMouseUp) {\r\n                    this.props.onUserMouseUp(brushing_is);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    handleMouseMove(e) {\r\n        e.preventDefault();\r\n\r\n        const x = e.pageX;\r\n        const y = e.pageY;\r\n        const xy = [Math.round(x), Math.round(y)];\r\n        const viewport = this.viewport();\r\n\r\n        if (this.state.isBrushing) {\r\n            let newBegin;\r\n            let newEnd;\r\n\r\n            const tb = this.state.initialBrushBeginTime;\r\n            const te = this.state.initialBrushEndTime;\r\n\r\n            if (this.state.brushingInitializationSite === \"overlay\") {\r\n                const offset = getElementOffset(this.overlay);\r\n                const xx = e.pageX - offset.left;\r\n                const t = this.props.timeScale.invert(xx).getTime();\r\n                if (t < tb) {\r\n                    newBegin = t < viewport.begin().getTime() ? viewport.begin() : t;\r\n                    newEnd = tb > viewport.end().getTime() ? viewport.end() : tb;\r\n                } else {\r\n                    newBegin = tb < viewport.begin().getTime() ? viewport.begin() : tb;\r\n                    newEnd = t > viewport.end().getTime() ? viewport.end() : t;\r\n                }\r\n            } else {\r\n                const xy0 = this.state.initialBrushXYPosition;\r\n                let timeOffset =\r\n                    this.props.timeScale.invert(xy0[0]).getTime() -\r\n                    this.props.timeScale.invert(xy[0]).getTime();\r\n\r\n                // Constrain\r\n                let startOffsetConstraint = timeOffset;\r\n                let endOffsetConstrain = timeOffset;\r\n                if (tb - timeOffset < viewport.begin()) {\r\n                    startOffsetConstraint = tb - viewport.begin().getTime();\r\n                }\r\n                if (te - timeOffset > viewport.end()) {\r\n                    endOffsetConstrain = te - viewport.end().getTime();\r\n                }\r\n\r\n                newBegin =\r\n                    this.state.brushingInitializationSite === \"brush\" ||\r\n                    this.state.brushingInitializationSite === \"handle-left\"\r\n                        ? parseInt(tb - startOffsetConstraint, 10)\r\n                        : tb;\r\n                newEnd =\r\n                    this.state.brushingInitializationSite === \"brush\" ||\r\n                    this.state.brushingInitializationSite === \"handle-right\"\r\n                        ? parseInt(te - endOffsetConstrain, 10)\r\n                        : te;\r\n\r\n                // Swap if needed\r\n                if (newBegin > newEnd) [newBegin, newEnd] = [newEnd, newBegin];\r\n            }\r\n\r\n            if (this.props.onTimeRangeChanged) {\r\n                this.props.onTimeRangeChanged(\r\n                    new TimeRange(newBegin, newEnd),\r\n                    this.state.brushIndex\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    //\r\n    // Render\r\n    //\r\n\r\n    renderOverlay() {\r\n        const { width, height } = this.props;\r\n\r\n        let cursor;\r\n        switch (this.state.brushingInitializationSite) {\r\n            case \"handle-right\":\r\n            case \"handle-left\":\r\n                cursor = \"ew-resize\";\r\n                break;\r\n            case \"brush\":\r\n                cursor = \"move\";\r\n                break;\r\n            default:\r\n                cursor =\r\n                    this.props.allowFreeDrawing || this.hasNullBrush() ? \"crosshair\" : \"default\";\r\n        }\r\n\r\n        const overlayStyle = {\r\n            fill: \"white\",\r\n            opacity: 0,\r\n            cursor\r\n        };\r\n        return (\r\n            <rect\r\n                ref={c => {\r\n                    this.overlay = c;\r\n                }}\r\n                x={0}\r\n                y={0}\r\n                width={width}\r\n                height={height}\r\n                style={overlayStyle}\r\n                onClick={this.handleMouseClick}\r\n                onMouseDown={this.handleOverlayMouseDown}\r\n                onMouseUp={this.handleMouseUp}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderBrush(timeRange, idx) {\r\n        const { timeScale, height } = this.props;\r\n\r\n        if (!timeRange) {\r\n            return <g />;\r\n        }\r\n\r\n        let cursor;\r\n        switch (this.state.brushingInitializationSite) {\r\n            case \"handle-right\":\r\n            case \"handle-left\":\r\n                cursor = \"ew-resize\";\r\n                break;\r\n            case \"overlay\":\r\n                cursor =\r\n                    this.props.allowFreeDrawing || this.hasNullBrush() ? \"crosshair\" : \"default\";\r\n                break;\r\n            default:\r\n                cursor = \"move\";\r\n        }\r\n\r\n        // Style of the brush area\r\n        const brushDefaultStyle = {\r\n            fill: \"#777\",\r\n            fillOpacity: 0.3,\r\n            stroke: \"#fff\",\r\n            shapeRendering: \"crispEdges\",\r\n            cursor\r\n        };\r\n        const userStyle = this.props.style ? this.props.style(idx) : {};\r\n        const brushStyle = merge(true, brushDefaultStyle, userStyle);\r\n        const userText = this.props.text ? this.props.text(idx):''\r\n        const userTextStyle = this.props.textStyle ? this.props.textStyle(idx):{}\r\n        if (!this.viewport().disjoint(timeRange)) {\r\n            const range = timeRange.intersection(this.viewport());\r\n            const begin = range.begin();\r\n            const end = range.end();\r\n            const [x, y] = [timeScale(begin), 0];\r\n            const endPos = timeScale(end);\r\n            let width = endPos - x;\r\n            if (width < 1) {\r\n                width = 1;\r\n            }\r\n\r\n            const bounds = { x, y, width, height };\r\n\r\n            return (\r\n                <g\r\n                key={`${idx}-${brushStyle}-${userText}`}\r\n                pointerEvents=\"all\"\r\n                onClick={e => this.handleMouseClick(e, idx)}\r\n                onMouseDown={e => this.handleBrushMouseDown(e, idx)}\r\n                onMouseUp={this.handleMouseUp}\r\n                ><rect\r\n                    {...bounds}                    \r\n                    style={brushStyle}                   \r\n            /><text {...userTextStyle} x={bounds.x+bounds.width/2-24} y={bounds.y+bounds.height/2+24}>{userText}</text></g>\r\n            );\r\n        }\r\n        return <g />;\r\n    }\r\n\r\n    renderHandles(timeRange, idx) {\r\n        const { timeScale, height } = this.props;\r\n\r\n        if (!timeRange) {\r\n            return <g />;\r\n        }\r\n\r\n        // Style of the handles\r\n        const handleStyle = {\r\n            fill: \"white\",\r\n            opacity: 0,\r\n            cursor: \"ew-resize\"\r\n        };\r\n\r\n        if (!this.viewport().disjoint(timeRange)) {\r\n            const range = timeRange.intersection(this.viewport());\r\n            const [begin, end] = range.toJSON();\r\n            const [x, y] = [timeScale(begin), 0];\r\n            const endPos = timeScale(end);\r\n\r\n            let width = endPos - x;\r\n            if (width < 1) {\r\n                width = 1;\r\n            }\r\n\r\n            const handleSize = this.props.handleSize;\r\n\r\n            const leftHandleBounds = { x: x - 1, y, width: handleSize, height };\r\n            const rightHandleBounds = {\r\n                x: x + (width - handleSize),\r\n                y,\r\n                width: handleSize + 1,\r\n                height\r\n            };\r\n\r\n            return (\r\n                <g>\r\n                    <rect\r\n                        {...leftHandleBounds}\r\n                        style={handleStyle}\r\n                        pointerEvents=\"all\"\r\n                        onMouseDown={e => this.handleHandleMouseDown(e, \"left\", idx)}\r\n                        onMouseUp={this.handleMouseUp}\r\n                    />\r\n                    <rect\r\n                        {...rightHandleBounds}\r\n                        style={handleStyle}\r\n                        pointerEvents=\"all\"\r\n                        onMouseDown={e => this.handleHandleMouseDown(e, \"right\", idx)}\r\n                        onMouseUp={this.handleMouseUp}\r\n                    />\r\n                </g>\r\n            );\r\n        }\r\n        return <g />;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <g onMouseMove={this.handleMouseMove}>\r\n                {this.renderOverlay()}\r\n                {(this.props.timeRanges || []).map((timeRange, idx) => {\r\n                    return (\r\n                        <g key={`multibrush_${idx}`}>\r\n                            {this.renderBrush(timeRange, idx)}\r\n                            {this.renderHandles(timeRange, idx)}\r\n                        </g>\r\n                    );\r\n                })}\r\n            </g>\r\n        );\r\n    }\r\n}\r\n\r\nMultiBrush.propTypes = {\r\n    /**\r\n     * The timeranges for the brushes. Typically you would maintain this\r\n     * as state on the surrounding page, since it would likely control\r\n     * another page element, such as the range of the main chart. See\r\n     * also `onTimeRangeChanged()` for receiving notification of the\r\n     * brush range being changed by the user.\r\n     *\r\n     * Takes an array of Pond TimeRange object.\r\n     */\r\n    timeRanges: PropTypes.arrayOf(PropTypes.instanceOf(TimeRange)),\r\n\r\n    /**\r\n     * The brush is rendered as an SVG rect. You can specify the style\r\n     * of this rect using this prop. The brush style is a function that you\r\n     * provide. It will be called with the index of the TimeRange, corresponding\r\n     * to those in the `timeRanges` prop.\r\n     */\r\n    style: PropTypes.func, //eslint-disable-line\r\n\r\n    /**\r\n     * The size of the invisible side handles. Defaults to 6 pixels.\r\n     */\r\n    handleSize: PropTypes.number,\r\n\r\n    /**\r\n     * If this prop is false, you will only be able to draw a new brush if the last position of the timeRanges\r\n     * array is equal to null, otherwise it will allow the free drawing and the index passed to onTimeRangeChanged\r\n     * will the equal to the length of the timeRanges array\r\n     */\r\n    allowFreeDrawing: PropTypes.bool,\r\n\r\n    /**\r\n     * A callback which will be called if the brush range is changed by\r\n     * the user. It is called with a Pond TimeRange object and the index position of\r\n     * the brush in the timeRanges prop.\r\n     */\r\n    onTimeRangeChanged: PropTypes.func,\r\n\r\n    /**\r\n     * when user stop drawing or dragging box\r\n     */\r\n    onUserMouseUp: PropTypes.func,\r\n\r\n    /**\r\n     * When the user clicks one of the TimeRanges\r\n     */\r\n    onTimeRangeClicked: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The timeScale supplied by the surrounding ChartContainer\r\n     */\r\n    timeScale: PropTypes.func,\r\n\r\n    /**\r\n     * [Internal] The width supplied by the surrounding ChartContainer\r\n     */\r\n    width: PropTypes.number,\r\n\r\n    /**\r\n     * [Internal] The height supplied by the surrounding ChartContainer\r\n     */\r\n    height: PropTypes.number\r\n};\r\n\r\nMultiBrush.defaultProps = {\r\n    handleSize: 6,\r\n    allowFreeDrawing: true\r\n};","import React from 'react';\r\nimport { format } from \"d3-format\";\r\n// Imports from the charts library\r\n\r\nimport {ChartContainer, ChartRow, Charts, YAxis, LineChart, Legend, Resizable, styler} from \"react-timeseries-charts\";\r\nimport MultiBrush from './MultiBrush'\r\nconst upDownStyle = styler([\r\n    { key: \"in\", color: \"#C8D5B8\" }, \r\n    { key: \"out\", color: \"#9BB8D7\" }\r\n]);\r\nclass TimeSeriesPlot extends React.Component {\r\n\r\n    render(){\r\n        const dateStyle = {\r\n            fontSize: 12,\r\n            color: \"#AAA\",\r\n            borderWidth: 1,\r\n            borderColor: \"#F4F4F4\"\r\n        };\r\n  \r\n        const markerStyle = {\r\n          backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n          color: \"#AAA\",\r\n          marginLeft: \"5px\"\r\n        }\r\n  \r\n        const axistype = \"linear\";\r\n        const tracker = this.props.tracker ? `${this.props.tracker}` : \"\";\r\n        const formatter = format(\".4s\");\r\n  \r\n        return (\r\n            <div>\r\n                {/*\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-4\">\r\n                        <Legend\r\n                            type=\"swatch\"\r\n                            style={upDownStyle}\r\n                            categories={[\r\n                                { key: \"in\", label: \"Into Site\" },\r\n                                { key: \"out\", label: \"Out of site\" }\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <span style={dateStyle}>{tracker}</span>\r\n                        </div>\r\n                </div>\r\n                */}\r\n                <hr />\r\n  \r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        { this.props.tracker ?\r\n                            <div style={{position: 'relative'}}>\r\n                                <div style={{position: 'absolute', left: this.props.trackerX}}>\r\n                                    <div style={markerStyle}>Data In: {formatter(this.props.trackerEventIn.get('in'))}</div>\r\n                                </div>\r\n                            </div>\r\n                        : null }\r\n                        <Resizable>\r\n                            <ChartContainer\r\n                                timeRange={this.props.timerange}\r\n                                format={\"year\"}\r\n                                trackerPosition={this.props.tracker}\r\n                                onTrackerChanged={this.props.handleTrackerChanged}\r\n                                enablePanZoom={false}\r\n                                maxTime={this.props.timerange.end()}\r\n                                minTime={this.props.timerange.begin()}\r\n                                minDuration={1000 * 60 * 60}\r\n                                onBackgroundClick={this.props.onBackgroundClick}\r\n                                onTimeRangeChanged={this.props.handleTimeRangeChange}\r\n                            >\r\n                                <ChartRow height=\"250\" debug={false}>\r\n                                    <Charts>\r\n                                        <LineChart\r\n                                            axis=\"traffic\"\r\n                                            series={this.props.data}\r\n                                            columns={[\"in\"]}\r\n                                            style={upDownStyle}\r\n                                        />\r\n                                        <MultiBrush\r\n                                            timeRanges={this.props.selections}\r\n                                            style={i => {\r\n                                                if (i === this.props.selected) {\r\n                                                    return { fill: \"#46abff\" };\r\n                                                } else {\r\n                                                    return { fill: \"#cccccc\" };\r\n                                                }\r\n                                            }}\r\n                                            text={i => {\r\n                                                return this.props.getText?this.props.getText(i):''\r\n                                            }}\r\n                                            textStyle={i => {\r\n                                                return this.props.getTextStyle?this.props.getTextStyle(i):{}\r\n                                            }}\r\n                                            allowSelectionClear\r\n                                            onTimeRangeChanged={this.props.handleSelectionChange}\r\n                                            onTimeRangeClicked={this.props.onTimeRangeClicked}\r\n                                        />\r\n                                    </Charts>\r\n                                    <YAxis\r\n                                        id=\"traffic\"\r\n                                        label=\"Traffic (bps)\"\r\n                                        labelOffset={0}\r\n                                        min={this.props.minSignal}\r\n                                        max={this.props.maxSignal}\r\n                                        absolute={true}\r\n                                        width=\"60\"\r\n                                        type={axistype}\r\n                                    />\r\n                                </ChartRow>\r\n                            </ChartContainer>\r\n                        </Resizable>\r\n                    </div>\r\n                    \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default TimeSeriesPlot;","import React from 'react';\r\nimport TimeSeriesPlot from '../components/TimeSeriesPlot'\r\nimport _ from 'lodash'\r\n// Pond\r\nimport { TimeSeries, TimeRange } from \"pondjs\";\r\nimport * as tf from '@tensorflow/tfjs'\r\n/**\r\n * DATA\r\n */\r\nconst visibleNumPeriods = 3\r\nconst selectedAt = 1\r\nconst secondsInPeriod = 10\r\nconst labels_dict = {0 : 'W', 1 : 'NR', 2 : 'R'};\r\nconst labelsInput = {'w' : 'W', 'e' : 'NR', 'r' : 'R','W' : 'W', 'E' : 'NR', 'R' : 'R'};\r\n\r\nasync function predict(model, array) {\r\n    function array_to_tensor(array) {\r\n        const shape = [1, 5000, 2];\r\n        const tensor = tf.tensor3d(array, shape, \"float32\");\r\n        return tensor\r\n    }\r\n    const tensor =  array_to_tensor(array)\r\n    const prediction = model.predict(tensor).dataSync();\r\n    const prediction_arr = Array.from(prediction)\r\n\r\n    const score = labels_dict[prediction_arr.indexOf(_.max(prediction_arr))];\r\n    return score\r\n}\r\n\r\n/**\r\n * UTILS\r\n */\r\n\r\nconst breakTimeRange = (t0, t1, numCuts)=>{\r\n    let period = Math.floor((t1-t0)/numCuts)\r\n    return Array.apply(null,Array(numCuts+1)).map((n,i)=>{            \r\n        let initTime = parseInt((t0+i*period))\r\n        let finalTime = parseInt((t0+(i+1)*period))\r\n        if (i === numCuts){\r\n            return new TimeRange(initTime,t1)\r\n        }\r\n        return new TimeRange(initTime,finalTime)\r\n    })\r\n}\r\n\r\nconst cutTimeSeries = (data, offsetData, length)=>{\r\n    return data.slice(offsetData,parseInt(offsetData+length))\r\n}\r\n\r\nconst getAmplitude = (data)=>{\r\n    return Math.max(Math.abs(data.collection().max('in')), Math.abs(data.collection().min('in')))\r\n}\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        //console.log(initEEG)\r\n        //const max = Math.max(Math.abs(this.props.data.collection().max('in')), Math.abs(this.props.data.collection().min('in')))\r\n        //let initEMG = EMG.slice(beginTime*1000,endTime*1000)\r\n        this.state = {\r\n            EEG: null,//.slice(beginTime, beginTime+(initialPeriod*1000)*3.5)\r\n            EMG: null,\r\n            offsetData: 0,\r\n            tracker: null,\r\n            timerange: null,\r\n            selected: 0,\r\n            selections:null,\r\n            qualifications: {},\r\n            prediction: null,\r\n            trackerEventIn_EEG: null,\r\n            trackerEventIn_EMG: null,\r\n            trackerEventOut_EEG: null,\r\n            trackerEventOut_EMG: null,\r\n            trackerX: null\r\n        };\r\n    }\r\n    getText = (i)=>{\r\n        if (this.state.qualifications[i+this.state.offsetData]!=null){\r\n            return this.state.qualifications[i+this.state.offsetData]\r\n        } else if(i===this.state.selected) {\r\n            return this.state.prediction\r\n        }\r\n    }\r\n    getTextStyle = (i)=>{\r\n        if (this.state.qualifications[i+this.state.offsetData]!=null){\r\n            return {'fill':'#0057c2', 'fontSize': 48}\r\n        } else if(i===this.state.selected) {\r\n            return {'fill':'#bf9300','fontSize': 48 }\r\n        }\r\n    }\r\n    handleTrackerChanged = (t, scale) => {\r\n        this.setState({\r\n            tracker: t,\r\n            trackerEventIn_EEG: t && this.state.EEG.at(this.state.EEG.bisect(t)),\r\n            trackerEventIn_EMG: t && this.state.EMG.at(this.state.EMG.bisect(t)),\r\n            trackerEventOut_EEG: t && this.state.EEG.at(this.state.EEG.bisect(t)),\r\n            trackerEventOut_EMG: t && this.state.EMG.at(this.state.EMG.bisect(t)),\r\n            trackerX: t && scale(t)\r\n        });\r\n    }\r\n    \r\n    handleTimeRangeChange = timerange => {\r\n        this.setState({ timerange });\r\n    }\r\n    handleSelectionChange = (timerange, i) => {\r\n        //Blocked\r\n        //const selections = this.state.selections;\r\n        //selections[i] = timerange;\r\n        //this.setState({ selections });\r\n    }\r\n    onBackgroundClick = ()=>{\r\n        this.setState({ selection: null, prediction: null })\r\n    }\r\n    onTimeRangeClicked = (i)=>{\r\n        let newSelected = i%visibleNumPeriods\r\n        this.getPrediction(this.state.offsetData+newSelected).then((pred)=>{\r\n            this.setState({ selected: newSelected, prediction: pred })\r\n        })\r\n    }\r\n    getPrediction = (i, model=null)=>{\r\n        // i == offsetData+selected\r\n        let valEEG =  this.props.edf.getPhysicalSignalConcatRecords(0, (i)*secondsInPeriod, secondsInPeriod)\r\n        let valEMG =  this.props.edf.getPhysicalSignalConcatRecords(1, (i)*secondsInPeriod, secondsInPeriod)\r\n        let concat = Array.from(valEEG).concat(Array.from(valEMG))\r\n        if (!model) model = this.state.model\r\n        return predict(model, Float32Array.from(concat))\r\n    }\r\n    edfParser = (offsetData=0)=>{\r\n        let edf = this.props.edf\r\n        if (!edf) return\r\n        // http://www.pixpipe.io/edfdecoder/doc/\r\n        let totalRecords = edf.getNumberOfRecords()\r\n        let standardLength = edf.getRawSignal(0,0).length\r\n        let lastLength = edf.getRawSignal(0,totalRecords-1).length\r\n        let secondsInRecord = edf.getRecordDuration()\r\n        let beginTime = edf.getRecordingStartDate().getTime()\r\n        \r\n        let valuesEEG = edf.getPhysicalSignalConcatRecords(0, offsetData*secondsInPeriod, visibleNumPeriods*secondsInPeriod)\r\n        // Object.values(sample[\"EMG\"]).map( (p,i) => [parseInt((beginTime+i*timeDelta) * 1000), p])\r\n        let multiplier = 1 // beginTime>0?1:-1\r\n        let mapTime = _.map(valuesEEG.slice(0,10), (p,i) => {\r\n            return beginTime+multiplier*(i+offsetData*secondsInPeriod)*secondsInRecord * 1000\r\n        })\r\n        //console.log(mapTime)\r\n        let timeSeriesEEG = new TimeSeries({\r\n            name: `EEG`,\r\n            columns: [\"time\", \"in\"],\r\n            points: _.map(valuesEEG, (p,i) => [parseInt(beginTime+multiplier*(i+offsetData*secondsInPeriod)*secondsInRecord * 100), p])\r\n        });\r\n        let valuesEMG = edf.getPhysicalSignalConcatRecords(1, offsetData*secondsInPeriod, visibleNumPeriods*secondsInPeriod)\r\n        // Object.values(sample[\"EMG\"]).map( (p,i) => [parseInt((beginTime+i*timeDelta) * 1000), p])\r\n        let timeSeriesEMG = new TimeSeries({\r\n            name: `EMG`,\r\n            columns: [\"time\", \"in\"],\r\n            points: _.map(valuesEMG,  (p,i) => [parseInt(beginTime+multiplier*(i+offsetData*secondsInPeriod)*secondsInRecord * 100), p])\r\n        });\r\n        let selections = breakTimeRange(timeSeriesEEG.timerange().toJSON()[0], timeSeriesEEG.timerange().toJSON()[1], visibleNumPeriods)\r\n        return [timeSeriesEEG, timeSeriesEMG, selections]\r\n    }\r\n    _handleKeyDown = (event) => {     \r\n        // let numCuts =(endTime-beginTime)/initialPeriod //TOTAL DE TALLS\r\n        let selected = this.state.selected\r\n        let offset = this.state.offsetData\r\n        let eventKey = event.key\r\n        let qualifications =  this.state.qualifications\r\n        if (Object.keys(labelsInput).indexOf(eventKey) !== -1){\r\n            qualifications={...qualifications,[offset+selected]:labelsInput[event.key]}\r\n            eventKey='ArrowRight'\r\n        }else if(eventKey==' '){\r\n            qualifications={...qualifications,[offset+selected]:this.state.prediction}\r\n            eventKey='ArrowRight'\r\n        }        \r\n        //https://keycode.info/        \r\n        switch(eventKey){\r\n            case 'PageUp':\r\n                offset = offset+visibleNumPeriods\r\n                break;\r\n            case 'PageDown':\r\n                offset = offset-visibleNumPeriods>0?offset-visibleNumPeriods:0\r\n                break;\r\n            case 'ArrowRight':\r\n                //if (true)  // at the end\r\n                if (selected<selectedAt){\r\n                    selected+=1                  \r\n                }else{\r\n                    offset+=1\r\n                }                \r\n                break;\r\n            case 'ArrowLeft':\r\n                if (offset>0)offset-=1\r\n                else{\r\n                    if (selected>0){\r\n                        selected-=1\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                break\r\n        }\r\n        if (offset!=this.state.offsetData) {\r\n            let parsed = this.edfParser(offset)\r\n            let timeSeriesEEG = parsed[0]\r\n            let timeSeriesEMG = parsed[1]\r\n            let selections = parsed[2]\r\n            this.getPrediction(offset+selected).then((pred)=>{\r\n                this.setState({\r\n                    EEG: timeSeriesEEG,\r\n                    EMG: timeSeriesEMG,\r\n                    offsetData: offset,\r\n                    selected:selected,\r\n                    timerange: timeSeriesEEG.range(),\r\n                    selections: selections,\r\n                    qualifications: qualifications,\r\n                    prediction: pred\r\n                })\r\n            })\r\n        }else{\r\n            this.getPrediction(offset+selected).then((pred)=>{\r\n                this.setState({selected:selected, qualifications: qualifications, prediction:pred})\r\n            })\r\n        }\r\n        /*\r\n        this.setState((state)=>{\r\n            return {\r\n                selected:selected, \r\n                offsetData:offset,\r\n                timerange: newEEG.range(),\r\n                EEG:newEEG,\r\n                EMG:newEMG,\r\n                qualifications: qualifications\r\n            }\r\n        })*/\r\n    }\r\n    componentDidMount(){\r\n        document.addEventListener(\"keydown\", _.debounce(this._handleKeyDown,50));\r\n    }\r\n    componentWillUnmount() {\r\n        document.removeEventListener(\"keydown\", _.debounce(this._handleKeyDown, 50));\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.edf!=null && prevProps.edf!==this.props.edf){\r\n            let parsed = this.edfParser(0)\r\n            let timeSeriesEEG = parsed[0]\r\n            let timeSeriesEMG = parsed[1]\r\n            let selections = parsed[2]\r\n            tf.loadLayersModel('https://raw.githubusercontent.com/AgileDS/AutoScorer/model_dev/model/TF-js/1CNN-Model/model.json').then((model)=>{\r\n                this.getPrediction(0, model).then((prediction)=>{\r\n                    this.setState({\r\n                        EEG: timeSeriesEEG,//.slice(beginTime, beginTime+(initialPeriod*1000)*3.5)\r\n                        EMG: timeSeriesEMG,\r\n                        timerange: timeSeriesEEG.range(),\r\n                        selections: selections,\r\n                        model: model,\r\n                        prediction:prediction\r\n                    })\r\n                })\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        \r\n        return (\r\n            <div>\r\n                { this.state.EEG ? <TimeSeriesPlot \r\n                    data={this.state.EEG}\r\n                    tracker={this.state.tracker} \r\n                    timerange={this.state.timerange} \r\n                    selected={this.state.selected} \r\n                    selections={this.state.selections}\r\n                    trackerEventIn={this.state.trackerEventIn_EEG}\r\n                    trackerEventOut={this.state.trackerEventIn_EEG}\r\n                    trackerX={this.state.trackerX}\r\n                    handleTrackerChanged={this.handleTrackerChanged}\r\n                    handleTimeRangeChange={this.handleTimeRangeChange}\r\n                    handleSelectionChange={this.handleSelectionChange}\r\n                    onBackgroundClick={this.onBackgroundClick}\r\n                    onTimeRangeClicked={this.onTimeRangeClicked}\r\n                    maxSignal={800}\r\n                    minSignal={-800}\r\n                    getText={this.getText}\r\n                    getTextStyle={this.getTextStyle}\r\n                />:null }\r\n                {this.state.EMG ?<TimeSeriesPlot \r\n                    data={this.state.EMG}\r\n                    tracker={this.state.tracker} \r\n                    timerange={this.state.timerange} \r\n                    selected={this.state.selected} \r\n                    selections={this.state.selections}\r\n                    trackerEventIn={this.state.trackerEventIn_EMG}\r\n                    trackerEventOut={this.state.trackerEventOut_EMG}\r\n                    trackerX={this.state.trackerX}\r\n                    handleTrackerChanged={this.handleTrackerChanged}\r\n                    handleTimeRangeChange={this.handleTimeRangeChange}\r\n                    handleSelectionChange={this.handleSelectionChange}\r\n                    onBackgroundClick={this.onBackgroundClick}\r\n                    onTimeRangeClicked={this.onTimeRangeClicked}\r\n                    maxSignal={6000}\r\n                    minSignal={-6000}\r\n                    getText={this.getText}\r\n                    getTextStyle={this.getTextStyle}\r\n                />:null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Dashboard;\r\n  ","import React from 'react'\r\nimport {EdfDecoder} from 'edfdecoder'\r\nclass UploadForm extends React.Component {\r\n  render(props){\r\n    return(\r\n    <div>\r\n      <input type=\"file\" onChange={this.setFile.bind(this)} accept='.edf'/>\r\n    </div>\r\n    )\r\n  }\r\n  postFile(event) {   \r\n    // HTTP POST  \r\n  }\r\n  setFile(event) {\r\n    // Get the details of the files\r\n    let file = event.target.files[0]\r\n    let decoder = new EdfDecoder();\r\n    /*event.target.files[0].arrayBuffer((buff)=>{\r\n        decoder.setInput(buff);        \r\n        decoder.decode();\r\n        let myEdf = decoder.getOutput();\r\n        console.log('j')\r\n    })*/\r\n    if (file != null){\r\n      let reader = new FileReader();\r\n      reader.onloadend = ()=>{\r\n        let decoder = new EdfDecoder();\r\n        let buff = reader.result;\r\n        decoder.setInput(buff);        \r\n        decoder.decode();\r\n        this.props.handleData(decoder.getOutput())\r\n      }\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nexport default UploadForm;","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nimport Login from './login/Login'\r\nimport Register from './register/Register'\r\nimport Dashboard from './dashboard/Dashboard'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport UploadForm from './dashboard/UploadForm';\r\n\r\nclass App extends React.Component {\r\n  state={\r\n    edf:null\r\n  }\r\n  render(){\r\n    return (\r\n      <Router basename='/'>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/login\"/>\r\n            </Route>\r\n            <Route path=\"/login\">\r\n              <Login/>\r\n            </Route>  \r\n            <Route path=\"/dashboard\">\r\n              {!this.state.edf?<UploadForm handleData={(data)=>{this.setState({edf:data})}}/>:null}\r\n              <Dashboard edf={this.state.edf} />\r\n            </Route>\r\n            <Route path=\"/register\">\r\n                <Register/>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}